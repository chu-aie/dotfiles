version: "3"

tasks:
  default:
    deps:
      - task: task-ls

  greet:
    cmds:
      - echo $GREETING
    env:
      GREETING: Hey, there!

  task-ls:
    desc: List available tasks
    cmds:
      - task --list

  tmux-new:
    desc: Create a new tmux session
    cmds:
      - tmux new -s {{.CLI_ARGS}}

  tmux-ls:
    desc: List tmux sessions
    cmds:
      - tmux ls

  tmux-attach:
    desc: Attach to a tmux session
    cmds:
      - tmux attach -t {{.CLI_ARGS}}

  sysinfo:
    desc: Print system information
    cmds:
      - neofetch

  code-tunnel:
    desc: Create a tunnel to a remote VS Code instance
    cmds:
      - code tunnel --accept-server-license-terms

  poetry-disable-virtualenvs:
    desc: Disable virtualenvs in poetry
    cmds:
      - poetry config virtualenvs.create false

  poetry-enable-virtualenvs:
    desc: Enable virtualenvs in poetry
    cmds:
      - poetry config virtualenvs.create true

  init-hyperfast-project:
    desc: Create a new project using the hyperfast template
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - copier copy --UNSAFE gh:entelecheia/hyperfast-template .

  init-hyfi-project:
    desc: Create a new project using the hyfi template
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - copier copy --UNSAFE gh:entelecheia/hyfi-template .

  init-hyperfast-python-project:
    desc: Create a new Python project using the hyperfast template
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - copier copy --UNSAFE gh:entelecheia/hyperfast-python-template .

  init-hyperfast-docker-project:
    desc: Create a new Docker project using the hyperfast template
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - copier copy --UNSAFE gh:entelecheia/hyperfast-docker-template .

  reinit-project:
    desc: Reinitialize a project using the template of the current project
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - args=(); while IFS= read -r file; do args+=("--skip" "$file"); done < .copierignore; copier copy "${args[@]}" --answers-file .copier-config.yaml --UNSAFE . .

  reinit-hyfi-project:
    desc: Reinitialize a project using the hyfi template
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - args=(); while IFS= read -r file; do args+=("--skip" "$file"); done < .copierignore; copier copy "${args[@]}" --data 'code_template_source=gh:entelecheia/hyfi-template' --answers-file .copier-config.yaml --UNSAFE gh:entelecheia/hyperfast-python-template .

  git-lfs-install:
    desc: Install Git LFS
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - git lfs install

  git-lfs-track:
    desc: Track files with Git LFS
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - git lfs track {{.CLI_ARGS}}

  git-lfs-track-preset:
    desc: Track files with Git LFS
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - git lfs track "*.parquet"
      - git lfs track "*.pkl"
      - git lfs track "*.pth"
      - git lfs track "*.pt"
      - git lfs track "*.tar"
      - git lfs track "*.tar.gz"
      - git lfs track "*.tgz"
      - git lfs track "*.zip"
      - git lfs track "*.zst"
      - git lfs track "*.gz"
      - git lfs track "*.ogg"
      - git lfs track "*.mp3"
      - git lfs track "*.mp4"
      - git lfs track "*.wav"
      - git lfs track "*.avi"
      - git lfs track "*.mov"
      - git lfs track "*.mkv"
      - git lfs track "*.flac"
      - git lfs track "*.xlsx"
      - git lfs track "*.xls"
      - git lfs track "*.csv"
      - git lfs track "*.tsv"
      - git lfs track "*.pdf"
      - git lfs track "*.docx"
      - git lfs track "*.doc"
      - git lfs track "*.pptx"
      - git lfs track "*.ppt"
      - git lfs track "*.hwp"

  git-lfs-migrate:
    desc: Migrate files to Git LFS
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - git lfs migrate import --everything --include={{.CLI_ARGS}}

  lfs-folderstore-init:
    desc: Initialize the LFS folderstore for the current Git repository
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - git config --add lfs.customtransfer.lfs-folder.path "${HOME}/.local/bin/lfs-folderstore"
      - git config --add lfs.customtransfer.lfs-folder.args "/home/yj.lee/workspace/onedrive/lfs-folderstore"
      - git config --add lfs.standalonetransferagent lfs-folder
      - git config lfs.url "https://localhost"

  restart-docker-daemon:
    desc: Restart the Docker daemon
    cmds:
      - restart-docker-daemon

  watch-nvidia-smi:
    desc: Watch nvidia-smi output every second (useful for monitoring GPU usage)
    cmds:
      - watch -n 1 nvidia-smi

  dns-status:
    desc: Check the status of the DNS resolver
    cmds:
      - resolvectl status | grep "DNS Server" -A2

  sysinfo-inxi:
    desc: Print system information using inxi
    cmds:
      - inxi -F

  python-null-keyring-backend:
    desc: Enable the null keyring backend
    cmds:
      - export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring

  semantic-release-version:
    desc: Print the current semantic-release version
    cmds:
      - semantic-release print-version --current

  semantic-release-next-version:
    desc: Print the next semantic-release version
    cmds:
      - semantic-release print-version --next

  semantic-release-noop:
    desc: Run semantic-release in noop mode (useful for debugging)
    cmds:
      - semantic-release publish --noop -v DEBUG

  semantic-release-changelog:
    desc: Print the semantic-release changelog for the current release
    cmds:
      - semantic-release changelog --released

  semantic-release-next-changelog:
    desc: Print the semantic-release changelog for the next release
    cmds:
      - semantic-release changelog --unreleased

  git-show-branch:
    desc: Show the branch of the current Git repository
    cmds:
      - git show-branch --list

  git-show-tags:
    desc: Show the tags of the current Git repository
    cmds:
      - git tag --list

  git-show-remotes:
    desc: Show the remotes of the current Git repository
    cmds:
      - git remote --verbose

  git-show-refs:
    desc: Show the refs of the current Git repository
    cmds:
      - git show-ref

  git-checkout-branch:
    desc: Checkout a branch of the current Git repository
    cmds:
      - git checkout {{.CLI_ARGS}}

  git-checkout-main:
    desc: Checkout the main branch of the current Git repository
    cmds:
      - git checkout main

  git-checkout-branch-upstream:
    desc: Checkout a branch of the current Git repository and set the upstream
    cmds:
      - git checkout -B {{.CLI_ARGS}}
      - git push --set-upstream origin {{.CLI_ARGS}}
