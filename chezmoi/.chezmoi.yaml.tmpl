# {{- $chezmoiForce := or (has "--force" .chezmoi.args) (has "--force=true" .chezmoi.args) -}}
# {{- $interactive := and stdinIsATTY (not $chezmoiForce) -}}
# {{- $ubuntu := hasKey .chezmoi.osRelease "ubuntuCodename" -}}
# {{- $wsl := or (env "WSL_DISTRO_NAME") (env "IS_WSL") | not | not -}}
# {{- $devcontainer := or (env "REMOTE_CONTAINERS") (env "CODESPACES") (env "VSCODE_REMOTE_CONTAINERS_SESSION") (env "GITPOD_HOST") | not | not -}}
# {{- $gnome := lookPath "gnome-shell" | not | not -}}

# {{- $cpuCores := 1 -}}
# {{- $cpuThreads := 1 -}}
# {{- if eq .chezmoi.os "darwin" -}}
# {{-   $cpuCores = (output "sysctl" "-n" "hw.physicalcpu_max") | trim | atoi -}}
# {{-   $cpuThreads = (output "sysctl" "-n" "hw.logicalcpu_max") | trim | atoi -}}
# {{- else if eq .chezmoi.os "linux" -}}
# {{-   $cpuCores = (output "sh" "-c" "lscpu --online --parse | grep --invert-match '^#' | sort --field-separator=',' --key='2,4' --unique | wc --lines") | trim | atoi -}}
# {{-   $cpuThreads = (output "sh" "-c" "lscpu --online --parse | grep --invert-match '^#' | wc --lines") | trim | atoi -}}
# {{- else if eq .chezmoi.os "windows" -}}
# {{-   $cpuCores = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "(Get-CimInstance -ClassName 'Win32_Processor').NumberOfCores") | trim | atoi -}}
# {{-   $cpuThreads = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "(Get-CimInstance -ClassName 'Win32_Processor').NumberOfLogicalProcessors") | trim | atoi -}}
# {{- end -}}

# {{- $name:= or (env "DOTFILES_USER_NAME") "Your Name" -}}
# {{- $email:= or (env "DOTFILES_USER_EMAIL") "your_email@your.domain.com" -}}
# {{- $github_username := env "DOTFILES_GITHUB_USERNAME" -}}
# {{- $install_rootmoi := true -}}
# {{- if (env "DOTFILES_NO_ROOTMOI") -}}
# {{- $install_rootmoi = false -}}
# {{- writeToStdout (printf "üë®‚Äçüíª Install rootmoi: %t\n" $install_rootmoi) -}}
# {{- end -}}
# {{- if $devcontainer -}}
# {{- writeToStdout (printf "üë§ Name: %s\n" $name) -}}
# {{- writeToStdout (printf "üìß Email: %s\n" $email) -}}
# {{- writeToStdout (printf "üêô GitHub username: %s\n" $github_username) -}}
# {{- writeToStdout (printf "üë®‚Äçüíª Install rootmoi: %t\n" $install_rootmoi) -}}
# {{- end -}}

# {{- $hostname := .chezmoi.hostname -}}
# {{- $docker_username := "" -}}
# {{- $github_token := "" -}}
# {{- $dotdrop_repo := "https://github.com/entelecheia/dotdrop-files.git" -}}
# {{- $dockerfiles_repo := "https://github.com/entelecheia/dockerfiles.git" -}}
# {{- $ssh_algorithm := "ed25519" -}}
# {{- $ssh_keyfile := printf "id_%s_%s" $ssh_algorithm $hostname -}}
# {{- $workspace_name := "workspace" -}}
# {{- $workspace_root := joinPath .chezmoi.homeDir $workspace_name -}}
# {{- $symlink_colab_workspace := false -}}
# {{- $workspace_location := .chezmoi.homeDir -}}
# {{- $symlink_to_home := true -}}
# {{- $gpg_key_id := "" -}}
# {{- $gpg_passphrase := "change_this_passphrase_to_something_secure" -}}
# {{- $gpg_gitsign := false -}}
# {{- $sudoer := true -}}
# {{- $github_clones := "entelecheia/ekorpkit,entelecheia/ekorpkit-app" -}}
# {{- $auto_update := false -}}

# {{- $minimum := or $devcontainer ($ubuntu | not) -}}
# {{- if and (hasKey . "system") (hasKey .system "is_devcontainer") -}}
# {{-   $minimum = .system.is_devcontainer -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to install in minimum mode (see README)" -}}
# {{-   $minimum = promptBool $question $minimum -}}
# {{-   if $minimum -}}
# {{-     writeToStdout "‚úÖ Minimum mode enabled\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Minimum mode disabled\n" -}}
# {{-   end -}}
# {{- end -}}

# {{- if and (hasKey . "system") (hasKey .system "auto_update") -}}
# {{-   $auto_update = .system.auto_update -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to update dotfiles automatically" -}}
# {{-   $auto_update = promptBool $question $auto_update -}}
# {{-   if $auto_update -}}
# {{-     writeToStdout "‚úÖ Auto update enabled\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Auto update disabled\n" -}}
# {{-   end -}}
# {{- end -}}

# {{- if and (hasKey . "system") (hasKey .system "is_sudoer") -}}
# {{-   $sudoer = .system.is_sudoer -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you have sudo privileges" -}}
# {{-   $sudoer = promptBool $question $sudoer -}}
# {{-   if $sudoer -}}
# {{-     writeToStdout "‚úÖ Sudo privileges enabled\n" -}}
# {{-   else -}}
# {{-     $install_rootmoi := false -}}
# {{-     writeToStdout "‚úÖ Sudo privileges disabled\n" -}}
# {{-   end -}}
# {{- end -}}

# {{- if eq .chezmoi.os "darwin" -}}
# {{-   $install_rootmoi := false -}}
# {{- else if $sudoer -}}
# {{-   if and (hasKey . "system") (hasKey .system "install_rootmoi") -}}
# {{-       $install_rootmoi = .system.install_rootmoi -}}
# {{-   end -}}
# {{-   if $interactive -}}
# {{-       $question := "‚ùî Do you want to install dotfiles for the root user" -}}
# {{-       $install_rootmoi = promptBool $question $install_rootmoi -}}
# {{-       if $install_rootmoi -}}
# {{-           writeToStdout "‚úÖ Dotfiles will be installed for the root user\n" -}}
# {{-       else -}}
# {{-           writeToStdout "‚úÖ Dotfiles will not be installed for the root user\n" -}}
# {{-       end -}}
# {{-   end -}}
# {{- else -}}
# {{-   $install_rootmoi := false -}}
# {{-   writeToStdout "‚úÖ Dotfiles will not be installed for the root user\n" -}}
# {{- end -}}

# {{- if hasKey . "name" -}}
# {{-   $name = .name -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "‚ùî What is your full name" -}}
# {{-     $answer := "" -}}
# {{-     if $name -}}
# {{-       $answer = promptString $question $name -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     if regexMatch "^[A-Z][-' a-zA-Z]+$" $answer -}}
# {{-       $name = $answer -}}
# {{-       writeToStdout (printf "‚úÖ Name set as '%s'\n" $name) -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "‚ùå '%s' is an invalid name\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}

# {{- if and (hasKey . "github") (hasKey .github "username") -}}
# {{-   $github_username = .github.username -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What is your GitHub username" -}}
# {{-   $answer := "" -}}
# {{-   if $github_username -}}
# {{-     $answer = promptString $question $github_username -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $github_username = $answer -}}
# {{-   writeToStdout (printf "‚úÖ GitHub username set as '%s'\n" $github_username) -}}
# {{- end -}}

# {{- if and (hasKey . "docker") (hasKey .docker "username") -}}
# {{-   $docker_username = .docker.username -}}
# {{- else -}}
# {{-   $docker_username = $github_username -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What is your Docker username" -}}
# {{-   $answer := "" -}}
# {{-   if $docker_username -}}
# {{-     $answer = promptString $question $docker_username -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $docker_username = $answer -}}
# {{-   writeToStdout (printf "‚úÖ Docker username set as '%s'\n" $docker_username) -}}
# {{- end -}}

# {{- if hasKey . "email" -}}
# {{-   $email = .email -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "‚ùî What is your email" -}}
# {{-     $answer := "" -}}
# {{-     if $email -}}
# {{-       $answer = promptString $question $email -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     $answer = lower $answer -}}
# {{-     if regexMatch "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$" $answer -}}
# {{-       $email = $answer -}}
# {{-       writeToStdout (printf "‚úÖ Email set as '%s'\n" $email) -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "‚ùå '%s' is an invalid email\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}

# {{- if and (hasKey . "dotdrop") (hasKey .dotdrop "repo") -}}
# {{-   $dotdrop_repo = .dotdrop.repo -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What is your dotdrop files repository URL" -}}
# {{-   $answer := "" -}}
# {{-   if $dotdrop_repo -}}
# {{-     $answer = promptString $question $dotdrop_repo -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $dotdrop_repo = $answer -}}
# {{-   writeToStdout (printf "‚úÖ dotdrop files repo set as '%s'\n" $dotdrop_repo) -}}
# {{- end -}}

# {{- if and (hasKey . "docker") (hasKey .dotdrop "repo") -}}
# {{-   $dockerfiles_repo = .docker.repo -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What is your dockerfiles repository URL" -}}
# {{-   $answer := "" -}}
# {{-   if $dockerfiles_repo -}}
# {{-     $answer = promptString $question $dockerfiles_repo -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $dockerfiles_repo = $answer -}}
# {{-   writeToStdout (printf "‚úÖ dockerfiles repo set as '%s'\n" $dockerfiles_repo) -}}
# {{- end -}}

# {{- if and (hasKey . "github") (hasKey .github "clones") -}}
# {{-   $github_clones = .github.clones -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What are your GitHub repositories to clone (input as comma separated list)" -}}
# {{-   $answer := "" -}}
# {{-   if $github_clones -}}
# {{-     $answer = promptString $question $github_clones -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $github_clones = $answer -}}
# {{-   writeToStdout (printf "‚úÖ GitHub repositories to clone set as '%s'\n" $github_clones) -}}
# {{- end -}}

# {{- if and (hasKey . "ssh") (hasKey .ssh "algorithm") -}}
# {{-   $ssh_algorithm = .ssh.algorithm -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Which SSH algorithm do you want to use" -}}
# {{-   $answer := "" -}}
# {{-   if $ssh_algorithm -}}
# {{-     $answer = promptString $question $ssh_algorithm -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $ssh_algorithm = $answer -}}
# {{-   writeToStdout (printf "‚úÖ SSH algorithm set as '%s'\n" $ssh_algorithm) -}}
# {{- end -}}

# {{- if and (hasKey . "system") (hasKey .system "hostname") -}}
# {{-   $hostname = .system.hostname -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "‚ùî What is hostname" -}}
# {{-     $answer := "" -}}
# {{-     if $hostname -}}
# {{-       $answer = promptString $question $hostname -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     if regexMatch "^[A-Za-z0-9._-]+$" $answer -}}
# {{-       $hostname = $answer -}}
# {{-       writeToStdout (printf "‚úÖ Hostname set as '%s'\n" $hostname) -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "‚ùå '%s' is an invalid hostname\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}

# {{- if and (hasKey . "ssh") (hasKey .ssh "key_filename") -}}
# {{-   $ssh_keyfile = .ssh.key_filename -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What SSH key filename do you want to use" -}}
# {{-   $answer := "" -}}
# {{-   if $ssh_keyfile -}}
# {{-     $answer = promptString $question $ssh_keyfile -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $ssh_keyfile = $answer -}}
# {{-   writeToStdout (printf "‚úÖ SSH key filename set as '%s'\n" $ssh_keyfile) -}}
# {{- end -}}

# {{- if and (hasKey . "github") (hasKey .github "token") -}}
# {{-   $github_token = .github.token -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What is GitHub Token (If not set, you will be prompted to authenticate)" -}}
# {{-   $answer := "" -}}
# {{-   if $github_token -}}
# {{-     $answer = promptString $question $github_token -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $github_token = $answer -}}
# {{-   writeToStdout (printf "‚úÖ GitHub Token set as '%s'\n" $github_token) -}}
# {{- end -}}

# {{- if and (hasKey . "gnupg") (hasKey .gnupg "key_id") -}}
# {{-   $gpg_key_id = .gnupg.key_id -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What is your GPG key ID (If you don't have one, leave it empty. This will be generated for you)" -}}
# {{-   $answer := "" -}}
# {{-   if $gpg_key_id -}}
# {{-     $answer = promptString $question $gpg_key_id -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $gpg_key_id = $answer -}}
# {{-   writeToStdout (printf "‚úÖ GPG key ID set as '%s'\n" $gpg_key_id) -}}
# {{- end -}}

# {{- if and (hasKey . "gnupg") (hasKey .gnupg "passphrase") -}}
# {{-   $gpg_passphrase = .gnupg.passphrase -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What passphrase do you want to use for your GPG key" -}}
# {{-   $answer := "" -}}
# {{-   if $gpg_passphrase -}}
# {{-     $answer = promptString $question $gpg_passphrase -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $gpg_passphrase = $answer -}}
# {{-   writeToStdout (printf "‚úÖ GPG passphrase set as '%s'\n" $gpg_passphrase) -}}
# {{- end -}}

# {{- if and (hasKey . "gnupg") (hasKey .gnupg "gitsign") -}}
# {{-   $gpg_gitsign = .gnupg.gitsign -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to use GPG to sign git commits globally" -}}
# {{-   $gpg_gitsign = promptBool $question $gpg_gitsign -}}
# {{-   if $gpg_gitsign -}}
# {{-     writeToStdout "‚úÖ Git commits will be signed by GPG\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Git comiits will not be signed by GPG\n" -}}
# {{-   end -}}
# {{- end -}}

# {{- if and (hasKey . "workspace") (hasKey .workspace "name") -}}
# {{-   $workspace_name = .workspace.name -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What name do you want to use as workspace root directory" -}}
# {{-   $answer := "" -}}
# {{-   if $workspace_name -}}
# {{-     $answer = promptString $question $workspace_name -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $workspace_name = $answer -}}
# {{-   if $symlink_to_home -}}
# {{-     $workspace_root := joinPath .chezmoi.homeDir $workspace_name -}}
# {{-   else -}}
# {{-     $workspace_root := joinPath $workspace_location $workspace_name -}}
# {{-   end -}}
# {{-   writeToStdout (printf "‚úÖ Worksapce root set as '%s'\n" $workspace_root) -}}
# {{- end -}}

# {{- if ne $wsl true -}}
# {{- if and (hasKey . "workspace") (hasKey .workspace "location") -}}
# {{-   $workspace_location = .workspace.location -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Where do you want to put your workspace" -}}
# {{-   $answer := "" -}}
# {{-   if $workspace_location -}}
# {{-     $answer = promptString $question $workspace_location -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $workspace_location = $answer -}}
# {{-   writeToStdout (printf "‚úÖ Worksapce location set as '%s'\n" $workspace_location) -}}
# {{- end -}}

# {{- if ne .chezmoi.homeDir $workspace_location -}}
# {{- if and (hasKey . "workspace") (hasKey .workspace "symlink_to_home") -}}
# {{-   $symlink_to_home = .workspace.symlink_to_home -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to symlink your workspace to home directory" -}}
# {{-   $symlink_to_home = promptBool $question $symlink_to_home -}}
# {{-   if $symlink_to_home -}}
# {{-     writeToStdout "‚úÖ Workspace will be symlinked to home directory\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Workspace will not be symlinked to home directory\n" -}}
# {{-   end -}}
# {{- end -}}
# {{- end -}}
# {{- end -}}

# {{- if not $sudoer -}}
# {{- $symlink_colab_workspace := false -}}
# {{-     writeToStdout "‚úÖ Colab workspace will not be symlinked\n" -}}
# {{- else -}}
# {{- if and (hasKey . "workspace") (hasKey .workspace "symlink_colab_workspace") -}}
# {{-   $symlink_colab_workspace = .workspace.symlink_colab_workspace -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to symlink workspace to colab default google drive directory to maintain persistence across sessions" -}}
# {{-   $symlink_colab_workspace = promptBool $question $symlink_colab_workspace -}}
# {{-   if $symlink_colab_workspace -}}
# {{-     writeToStdout "‚úÖ Colab workspace will be symlinked to workspace root\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Colab workspace will not be symlinked\n" -}}
# {{-   end -}}
# {{- end -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   writeToStdout "\nüí° Tip: you can always make chezmoi ask this again by running `chezmoi init` without `--force`.\n" -}}
# {{- end -}}

# {{- /* This retains the value passed with --source on chezmoi init, which is used in the ../install.sh script */ -}} #
sourceDir: "{{ .chezmoi.workingTree }}"

verbose: true

diff:
    exclude:
        - always
status:
    exclude:
        - always

# {{- if $gpg_passphrase -}} #
encryption: gpg
gpg:
  symmetric: true
  args:
    - "--batch"
    - "--passphrase"
    - {{ $gpg_passphrase | quote }}
    - "--no-symkey-cache"
# {{- end -}}

# {{/* Here we "export" the variables, so we can access them outside this file */ -}} #
data:
    name: {{ $name | quote }}
    email: {{ $email | quote }}
    editor: "vi"
    system:
        auto_update: {{ $auto_update }}
        hostname: {{ $hostname }}
        is_wsl: {{ $wsl }}
        is_devcontainer: {{ $minimum }}
        is_gnome: {{ $gnome }}
        is_interactive: {{ $interactive }}
        is_sudoer: {{ $sudoer }}
        install_rootmoi: {{ and $install_rootmoi $sudoer }}
        uname_arch: {{ output "uname" "-m" | trim | quote }}
        cpu:
            cores: {{ $cpuCores }}
            threads: {{ $cpuThreads }}
    ssh:
        algorithm: {{ $ssh_algorithm }}
        key_filename: {{ $ssh_keyfile }}
    gnupg:
        key_id: {{ $gpg_key_id | quote }}
        passphrase: {{ $gpg_passphrase | quote }}
        gitsign: {{ $gpg_gitsign }}
    github:
        username: {{ $github_username }}
        token: {{ $github_token | quote }}
        clones: {{ $github_clones }}
    dotdrop:
        repo: {{ $dotdrop_repo }}
        user_profile: user
        root_profile: root
    docker:
        repo: {{ $dockerfiles_repo }}
        username: {{ $docker_username }}
    workspace:
        name: {{ $workspace_name }}
        location: {{ $workspace_location }}
        root: {{ $workspace_root }}
        move_existing: true
        symlink_to_home: {{ $symlink_to_home }}
        symlink_colab_workspace: {{ $symlink_colab_workspace }}
        colab_drive: "/content/drive/MyDrive"
    github_repos:
# {{- if $github_clones -}}
# {{- range (split "," $github_clones) }} #
        - name: {{.}}
          url: https://github.com/{{.}}.git 
# {{ end -}} #
# {{ end -}} #
