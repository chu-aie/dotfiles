# {{- $chezmoiForce := or (has "--force" .chezmoi.args) (has "--force=true" .chezmoi.args) -}}
# {{- $interactive := and stdinIsATTY (not $chezmoiForce) -}}
# {{- $ubuntu := hasKey .chezmoi.osRelease "ubuntuCodename" -}}
# {{- $wsl := or (env "WSL_DISTRO_NAME") (env "IS_WSL") | not | not -}}
# {{- $devcontainer := or (env "REMOTE_CONTAINERS") (env "CODESPACES") (env "VSCODE_REMOTE_CONTAINERS_SESSION") (env "GITPOD_HOST") | not | not -}}
# {{- $gnome := lookPath "gnome-shell" | not | not -}}

# {{- $cpuCores := 1 -}}
# {{- $cpuThreads := 1 -}}
# {{- if eq .chezmoi.os "darwin" -}}
# {{-   $cpuCores = (output "sysctl" "-n" "hw.physicalcpu_max") | trim | atoi -}}
# {{-   $cpuThreads = (output "sysctl" "-n" "hw.logicalcpu_max") | trim | atoi -}}
# {{- else if eq .chezmoi.os "linux" -}}
# {{-   $cpuCores = (output "sh" "-c" "lscpu --online --parse | grep --invert-match '^#' | sort --field-separator=',' --key='2,4' --unique | wc --lines") | trim | atoi -}}
# {{-   $cpuThreads = (output "sh" "-c" "lscpu --online --parse | grep --invert-match '^#' | wc --lines") | trim | atoi -}}
# {{- else if eq .chezmoi.os "windows" -}}
# {{-   $cpuCores = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "(Get-CimInstance -ClassName 'Win32_Processor').NumberOfCores") | trim | atoi -}}
# {{-   $cpuThreads = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "(Get-CimInstance -ClassName 'Win32_Processor').NumberOfLogicalProcessors") | trim | atoi -}}
# {{- end -}}

# {{- $minimum := $devcontainer -}}
# {{- if eq (env "DOTFILES_MINIMUM") "true" "True" "TRUE" "1" -}}
# {{-   $minimum = true -}}
# {{- end -}}
# {{- $name:= or (env "USER_FULLNAME") "Your Name" -}}
# {{- $email:= or (env "USER_EMAIL") "your_email@your.domain.com" -}}
# {{- $hostname := or (env "SYSTEM_HOSTNAME") .chezmoi.hostname -}}
# {{- $dotdrop_user_profile := or (env "DOTDROP_PROFILE") "user" -}}
# {{- $github_username := env "GITHUB_USERNAME" -}}
# {{- $workspace_location := "" -}}
# {{- $winhome := or (env "WINHOME") (output "sh" "-c" "command -v wslpath > /dev/null && command -v wslvar > /dev/null && wslpath $(wslvar USERPROFILE) || echo ''") -}}
# {{- if and $wsl ($winhome | not | not) -}}
# {{-   writeToStdout (printf "\nü™ü WSL detected, running with Windows Home directory: %s" $winhome) -}}
# {{- else -}}
# {{-   $workspace_location = or (env "WORKSPACE_LOCATION") .chezmoi.homeDir -}}
# {{- end -}}

# {{- $apply_rootmoi := true -}}
# {{- if eq (env "DOTFILES_APPLY_ROOTMOI") "false" "False" "FALSE" "0" -}}
# {{-   $apply_rootmoi = false -}}
# {{- end -}}

# {{- $use_dotdrop := true -}}
# {{- if eq (env "DOTFILES_USE_DOTDROP") "false" "False" "FALSE" "0" -}}
# {{-   $use_dotdrop = false -}}
# {{- end -}}
# {{- $dotdrop_repo := "" -}}
# {{- $dotdrop_config_dir := or (env "DOTDROP_CONFIGDIR") (joinPath .chezmoi.homeDir ".config/dotdrop") -}}
# {{- $dotdrop_config_file := or (env "DOTDROP_CONFIG") (joinPath $dotdrop_config_dir "config-user.yaml") -}}
# {{- $dotdrop_root_config_file := or (env "DOTDROP_ROOT_CONFIG") (joinPath $dotdrop_config_dir "config-root.yaml") -}}

# {{- $use_pass := true -}}
# {{- if eq (env "DOTFILES_USE_PASS") "false" "False" "FALSE" "0" -}}
# {{-   $use_pass = false -}}
# {{- end -}}
# {{- $pass_store_dir := or (env "PASSWORD_STORE_DIR") (joinPath .chezmoi.homeDir ".password-store") -}}
# {{- $pass_repo := or (env "PASS_REPO") "" -}}

# {{- $use_passage := true -}}
# {{- if eq (env "DOTFILES_USE_PASSAGE") "false" "False" "FALSE" "0" -}}
# {{-   $use_passage = false -}}
# {{- end -}}
# {{- $passage_store_dir := or (env "PASSAGE_DIR") (joinPath .chezmoi.homeDir ".passage/store") -}}
# {{- $passage_repo := or (env "PASSAGE_REPO") "" -}}
# {{- $passage_share_dir := or (env "PASSAGE_SHARE_DIR") (joinPath .chezmoi.homeDir ".local/share/passage") -}}

# {{- $use_code := false -}}
# {{- if eq (env "DOTFILES_USE_CODE") "true" "True" "TRUE" "1" -}}
# {{-   $use_code = true -}}
# {{- end -}}

# {{- $use_1password := false -}}
# {{- if eq (env "DOTFILES_USE_1PASSWORD") "true" "True" "TRUE" "1" -}}
# {{-   $use_1password = true -}}
# {{- end -}}
# {{- $op_account := or (env "OP_ACCOUNT") "" -}}
# {{- $op_vault := or (env "OP_VAULT") "dev" -}}
# {{- $op_connect_host := or (env "OP_CONNECT_HOST") "" -}}
# {{- $op_connect_token := or (env "OP_CONNECT_TOKEN") "" -}}

# {{- $use_vault := false -}}
# {{- if eq (env "DOTFILES_USE_VAULT") "true" "True" "TRUE" "1" -}}
# {{-   $use_vault = true -}}
# {{- end -}}

# {{- $use_microk8s := false -}}
# {{- if eq (env "DOTFILES_USE_MICROK8S") "true" "True" "TRUE" "1" -}}
# {{-   $use_microk8s = true -}}
# {{- end -}}

# {{- $verbose := "1" -}}
# {{- if and (hasKey . "system") (hasKey .system "verbose") -}}
# {{-   $verbose = .system.verbose | toString -}}
# {{- else -}}
# {{-   $verbose = or (env "DOTFILES_VERBOSE") "False" -}}
# {{- end -}}
# {{- if eq $verbose "f" "F" "false" "False" "FALSE" "0" -}}
# {{-   $verbose = "0" -}}
# {{- end -}}

# {{- $ssh_homedir := or (joinPath .chezmoi.homeDir ".ssh") -}}
# {{- $gpg_homedir := or (env "GNUPGHOME") (joinPath .chezmoi.homeDir ".gnupg") -}}
# {{- $gpg_key_id_file := joinPath $ssh_homedir ".gpg-id" -}}
# {{- $gpg_key_id := env "GPG_KEY_ID" -}}
# {{- $gpg_passphrase := "" -}}

# {{- $git_commit_gpgsign := false -}}
# {{- if and (hasKey . "gnupg") (hasKey .gnupg "gitsign") -}}
# {{-   $git_commit_gpgsign = .gnupg.gitsign -}}
# {{- else -}}
# {{-   if eq (env "GIT_COMMIT_GPGSIGN") "true" "True" "TRUE" "1" -}}
# {{-       $git_commit_gpgsign = true -}}
# {{-   else -}}
# {{-       $git_commit_gpgsign = false -}}
# {{-   end -}}
# {{- end -}}

# {{- $use_autorestic := false -}}
# {{- if eq (env "DOTFILES_USE_AUTORESTIC") "true" "True" "TRUE" "1" -}}
# {{-   $use_autorestic = true -}}
# {{- end -}}
# {{- $autorestic_config_file := joinPath .chezmoi.homeDir ".config/autorestic/autorestic.yml" -}}
# {{- $autorestic_backup_dotfiles := true -}}
# {{- $autorestic_restore_dotfiles := true -}}
# {{- $autorestic_location := "dotfiles" -}}
# {{- $autorestic_restore_to := joinPath .chezmoi.homeDir ".local/backup/autorestic" -}}

# {{- $sudoer := true -}}
# {{- $sudo_check := "" -}}
# {{- if eq .chezmoi.os "linux" -}}
# {{-   $sudo_check = (output "sh" "-c" (printf "test -n \"$(ls /etc/sudoers.d | grep -w %s)\" && echo sudo || echo false" .chezmoi.username)) | trim -}}
# {{- else -}}
# {{-   $sudo_check = (output "sh" "-c" "test -n \"$(groups | grep -w admin)\" && echo sudo || echo false") | trim -}}
# {{- end -}}
# {{- if or (eq $sudo_check "sudo") (eq .chezmoi.username "root") ($wsl) -}}
# {{-   $sudoer = true -}}
# {{- else -}}
# {{-   $sudoer = false -}}
# {{-   $apply_rootmoi := false -}}
# {{- end -}}

# {{- writeToStdout "---\n" -}}
# {{- writeToStdout "üñ•Ô∏è  Information found from your environment:\n\n" -}}
# {{- writeToStdout (printf "üë§  Name: %s\n" $name) -}}
# {{- writeToStdout (printf "üìß  Email: %s\n" $email) -}}
# {{- writeToStdout (printf "üè†  Hostname: %s\n" $hostname) -}}
# {{- writeToStdout (printf "üêô  GitHub username: %s\n" $github_username) -}}
# {{- writeToStdout (printf "üìÅ  Workspace location: %s\n" $workspace_location) -}}
# {{- writeToStdout (printf "üîê  Have admin rights: %t\n" $sudoer) -}}
# {{- if and (eq .chezmoi.os "linux") -}}
# {{- writeToStdout (printf "ü¶∏  Apply rootmoi: %t\n" $apply_rootmoi) -}}
# {{- end -}}
# {{- if $minimum | not -}}
# {{- writeToStdout (printf "üì¶  Use autorestic: %t\n" $use_autorestic) -}}
# {{- writeToStdout (printf "üîñ  Use dotdrop: %t\n" $use_dotdrop) -}}
# {{- writeToStdout (printf "üîë  Use pass: %t\n" $use_pass) -}}
# {{- writeToStdout (printf "üîë  Use 1password: %t\n" $use_1password) -}}
# {{- writeToStdout (printf "üöÄ  Use microk8s: %t\n" $use_microk8s) -}}
# {{- end -}}
# {{- writeToStdout (printf "üî¨  Verbose: %t\n" ($verbose | not | not)) -}}
# {{- writeToStdout "---\n" -}}

# {{- $age_recipients:= or (env "AGE_RECIPIENTS") "" -}}
# {{- $docker_username := "" -}}
# {{- $github_token := "" -}}
# {{- $dockerfiles_repo := "https://github.com/entelecheia/dockerfiles.git" -}}
# {{- $dockerfiles_share_dir := joinPath .chezmoi.homeDir ".local/share/dockerfiles" -}}
# {{- $ssh_algorithm := "ed25519" -}}
# {{- $workspace_name := "workspace" -}}
# {{- $workspace_root := joinPath $workspace_location $workspace_name -}}
# {{- $workspace_home := $workspace_root -}}
# {{- $symlink_colab_workspace := false -}}
# {{- $symlink_to_home := true -}}

# {{- $github_clones := "" -}}
# {{- $auto_update := false -}}

# {{- if and (hasKey . "system") (hasKey .system "is_minimum") -}}
# {{-   $minimum = .system.is_minimum -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to install in minimum mode (see README)" -}}
# {{-   $minimum = promptBool $question $minimum -}}
# {{- end -}}
# {{-   if $minimum -}}
# {{-     writeToStdout "‚úÖ Minimum mode enabled\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Minimum mode disabled\n" -}}
# {{-   end -}}

# {{- if and (hasKey . "system") (hasKey .system "auto_update") -}}
# {{-   $auto_update = .system.auto_update -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to update dotfiles automatically" -}}
# {{-   $auto_update = promptBool $question $auto_update -}}
# {{- end -}}
# {{-   if $auto_update -}}
# {{-     writeToStdout "‚úÖ Auto update enabled\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Auto update disabled\n" -}}
# {{-   end -}}

# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to enable verbose mode (0/1/f/F/t/T)" -}}
# {{-   $verbose = promptString $question $verbose -}}
# {{- end -}}
# {{-   if eq $verbose "f" "F" "false" "False" "FALSE" "0" -}}
# {{-     $verbose = "0" -}}
# {{-     writeToStdout "‚úÖ Verbose mode disabled\n" -}}
# {{-   else if eq $verbose "t" "T" "true" "True" "TRUE" "1" -}}
# {{-     $verbose = "1" -}}
# {{-     writeToStdout "‚úÖ Verbose mode enabled\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Verbose mode enabled\n" -}}
# {{-   end -}}

# {{- if eq .chezmoi.os "darwin" -}}
# {{-   $apply_rootmoi := false -}}
# {{- else if $sudoer -}}
# {{-   if and (hasKey . "system") (hasKey .system "apply_rootmoi") -}}
# {{-       $apply_rootmoi = .system.apply_rootmoi -}}
# {{-   end -}}
# {{-   if $interactive -}}
# {{-       $question := "‚ùî Do you want to install dotfiles for the root user" -}}
# {{-       $apply_rootmoi = promptBool $question $apply_rootmoi -}}
# {{-   end -}}
# {{- else -}}
# {{-   $apply_rootmoi := false -}}
# {{- end -}}
# {{-       if $apply_rootmoi -}}
# {{-           writeToStdout "‚úÖ Dotfiles will be installed for the root user\n" -}}
# {{-       else -}}
# {{-           writeToStdout "‚úÖ Dotfiles will not be installed for the root user\n" -}}
# {{-       end -}}

# {{- if hasKey . "name" -}}
# {{-   $name = .name -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "‚ùî What is your full name" -}}
# {{-     $answer := "" -}}
# {{-     if $name -}}
# {{-       $answer = promptString $question $name -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     if regexMatch "^[A-Z][-' a-zA-Z]+$" $answer -}}
# {{-       $name = $answer -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "‚ùå '%s' is an invalid name\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}
# {{-       writeToStdout (printf "‚úÖ Name set as '%s'\n" $name) -}}

# {{- if and (hasKey . "github") (hasKey .github "username") -}}
# {{-   $github_username = .github.username -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What is your GitHub username" -}}
# {{-   $answer := "" -}}
# {{-   if $github_username -}}
# {{-     $answer = promptString $question $github_username -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $github_username = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ GitHub username set as '%s'\n" $github_username) -}}

# {{- if and (hasKey . "docker") (hasKey .docker "username") -}}
# {{-   $docker_username = .docker.username -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What is your Docker username" -}}
# {{-   $answer := "" -}}
# {{-   if $docker_username -}}
# {{-     $answer = promptString $question $docker_username -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $docker_username = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ Docker username set as '%s'\n" $docker_username) -}}

# {{- if hasKey . "email" -}}
# {{-   $email = .email -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "‚ùî What is your email" -}}
# {{-     $answer := "" -}}
# {{-     if $email -}}
# {{-       $answer = promptString $question $email -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     $answer = lower $answer -}}
# {{-     if regexMatch "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$" $answer -}}
# {{-       $email = $answer -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "‚ùå '%s' is an invalid email\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}
# {{-       writeToStdout (printf "‚úÖ Email set as '%s'\n" $email) -}}

# {{- if and (hasKey . "system") (hasKey .system "hostname") -}}
# {{-   $hostname = .system.hostname -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "‚ùî What is hostname" -}}
# {{-     $answer := "" -}}
# {{-     if $hostname -}}
# {{-       $answer = promptString $question $hostname -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     if regexMatch "^[A-Za-z0-9._-]+$" $answer -}}
# {{-       $hostname = $answer -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "‚ùå '%s' is an invalid hostname\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}
# {{-       writeToStdout (printf "‚úÖ Hostname set as '%s'\n" $hostname) -}}

# {{- if and (hasKey . "ssh") (hasKey .ssh "algorithm") -}}
# {{-   $ssh_algorithm = .ssh.algorithm -}}
# {{- end -}}
# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "‚ùî Which SSH algorithm do you want to use" -}}
# {{-   $answer := "" -}}
# {{-   if $ssh_algorithm -}}
# {{-     $answer = promptString $question $ssh_algorithm -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $ssh_algorithm = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ SSH algorithm set as '%s'\n" $ssh_algorithm) -}}

# {{- $ssh_keyfile := joinPath .chezmoi.homeDir (printf ".ssh/id_%s_%s" $ssh_algorithm $github_username) -}}
# {{-   writeToStdout (printf "‚úÖ SSH key filename set as '%s'\n" $ssh_keyfile) -}}

# {{- $age_keyfile := joinPath .chezmoi.homeDir (printf ".ssh/age_key_%s" $github_username) -}}
# {{-   writeToStdout (printf "‚úÖ Age key filename set as '%s'\n" $age_keyfile) -}}

# {{- if and (hasKey . "github") (hasKey .github "token") -}}
# {{-   $github_token = .github.token -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî What is GitHub Token (If not set, you will be prompted to authenticate)" -}}
# {{-   $answer := "" -}}
# {{-   if $github_token -}}
# {{-     $answer = promptString $question $github_token -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $github_token = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ GitHub Token set as '%s'\n" $github_token) -}}

# {{- if and (hasKey . "gnupg") (hasKey .gnupg "passphrase") -}}
# {{-   $gpg_passphrase = .gnupg.passphrase -}}
# {{- end -}}
# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "‚ùî What passphrase do you want to use for your GPG key" -}}
# {{-   $answer := "" -}}
# {{-   if $gpg_passphrase -}}
# {{-     $answer = promptString $question $gpg_passphrase -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $gpg_passphrase = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ GPG passphrase set as '%s'\n" $gpg_passphrase) -}}

# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "‚ùî Do you want to use GPG(or SSH) to sign git commits globally" -}}
# {{-   $git_commit_gpgsign = promptBool $question $git_commit_gpgsign -}}
# {{- end -}}
# {{-   if $git_commit_gpgsign -}}
# {{-     writeToStdout "‚úÖ Git commits will be signed by GPG(or SSH)\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Git comiits will not be signed by GPG(or SSH)\n" -}}
# {{-   end -}}

# {{- if and (hasKey . "dotdrop") (hasKey .dotdrop "repo") -}}
# {{-   $dotdrop_repo = .dotdrop.repo -}}
# {{- end -}}
# {{- if and $interactive $use_dotdrop -}}
# {{-   $question := "‚ùî What is your dotdrop files repository URL (ex: https://github.com/entelecheia/dotdrop-files.git)" -}}
# {{-   $answer := "" -}}
# {{-   if $dotdrop_repo -}}
# {{-     $answer = promptString $question $dotdrop_repo -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $dotdrop_repo = $answer -}}
# {{-   $use_dotdrop = $answer | not | not -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ dotdrop files repo set as '%s'\n" $dotdrop_repo) -}}

# {{- if and (hasKey . "dotdrop") (hasKey .dotdrop "user_profile") -}}
# {{-   $dotdrop_user_profile = .dotdrop.user_profile -}}
# {{- end -}}
# {{- if and $interactive $use_dotdrop -}}
# {{-   $question := "‚ùî What is your dotdrop user profile (ex: hostname)" -}}
# {{-   $answer := "" -}}
# {{-   if $dotdrop_user_profile -}}
# {{-     $answer = promptString $question $dotdrop_user_profile -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $dotdrop_user_profile = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ dotdrop user profile set as '%s'\n" $dotdrop_user_profile) -}}

# {{- if and (hasKey . "docker") (hasKey .docker "repo") -}}
# {{-   $dockerfiles_repo = .docker.repo -}}
# {{- end -}}
# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "‚ùî What is your dockerfiles repository URL (ex: https://github.com/entelecheia/dockerfiles.git)" -}}
# {{-   $answer := "" -}}
# {{-   if $dockerfiles_repo -}}
# {{-     $answer = promptString $question $dockerfiles_repo -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $dockerfiles_repo = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ dockerfiles repo set as '%s'\n" $dockerfiles_repo) -}}

# {{- if and (hasKey . "workspace") (hasKey .workspace "location") -}}
# {{-   $workspace_location = .workspace.location -}}
# {{- end -}}
# {{- if $interactive -}}
# {{-   $question := "‚ùî Where do you want to put your workspace" -}}
# {{-   $answer := "" -}}
# {{-   if $workspace_location -}}
# {{-     $answer = promptString $question $workspace_location -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $workspace_location = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ Worksapce location set as '%s'\n" $workspace_location) -}}

# {{- $workspace_root = joinPath $workspace_location $workspace_name -}}
# {{-   writeToStdout (printf "‚úÖ Worksapce root set as '%s'\n" $workspace_root) -}}
# {{- if $symlink_to_home -}}
# {{-   $workspace_home = joinPath .chezmoi.homeDir $workspace_name -}}
# {{- else -}}
# {{-   $workspace_home = joinPath $workspace_location $workspace_name -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ Worksapce root symlinked to '%s'\n" $workspace_home) -}}
# {{- $project_dir := joinPath $workspace_home "projects" -}}
# {{- $reference_dir := joinPath $workspace_home "references" -}}

# {{- if not $sudoer -}}
# {{-   $symlink_colab_workspace := false -}}
# {{- else -}}
# {{- if and (hasKey . "workspace") (hasKey .workspace "symlink_colab_workspace") -}}
# {{-   $symlink_colab_workspace = .workspace.symlink_colab_workspace -}}
# {{- end -}}
# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "‚ùî Do you want to symlink workspace to colab default google drive directory to maintain persistence across sessions" -}}
# {{-   $symlink_colab_workspace = promptBool $question $symlink_colab_workspace -}}
# {{- end -}}
# {{- end -}}
# {{-   if $symlink_colab_workspace -}}
# {{-     writeToStdout "‚úÖ Colab workspace symlinked to workspace root\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Colab workspace not symlinked\n" -}}
# {{-   end -}}

# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "‚ùî Do you want to use autorestic to backup your files" -}}
# {{-   $use_autorestic = promptBool $question $use_autorestic -}}
# {{- end -}}
# {{-   if $use_autorestic -}}
# {{-     writeToStdout "‚úÖ autorestic enabled\n" -}}
# {{-     writeToStdout (printf "‚úÖ autorestic config path set as '%s'\n" $autorestic_config_file) -}}
# {{-     writeToStdout (printf "‚úÖ autorestic location for dotfiles set as '%s'\n" $autorestic_location) -}}
# {{-     writeToStdout (printf "‚úÖ autorestic restores dotfiles to '%s'\n" $autorestic_restore_to) -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ autorestic disabled\n" -}}
# {{-   end -}}

# {{- if and (hasKey . "code") (hasKey .code "enabled") -}}
# {{-   $use_code = .code.enabled -}}
# {{- end -}}
# {{- if and $interactive $sudoer -}}
# {{-   $question := "‚ùî Do you want to use visual studio code" -}}
# {{-   $use_code = promptBool $question $use_code -}}
# {{- end -}}
# {{-   if $use_code -}}
# {{-     writeToStdout "‚úÖ visual studio code enabled\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ visual studio code disabled\n" -}}
# {{-   end -}}

# {{- if and (hasKey . "pass") (hasKey .pass "repo") -}}
# {{-   $pass_repo = .pass.repo -}}
# {{- end -}}
# {{- if and $interactive $use_pass -}}
# {{-   $question := "‚ùî What is your password store repository URL (ex: https://github.com/username/.password-store.git)" -}}
# {{-   $answer := "" -}}
# {{-   if $pass_repo -}}
# {{-     $answer = promptString $question $pass_repo -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $pass_repo = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ password store repo set as '%s'\n" $pass_repo) -}}

# {{- if and (hasKey . "passage") (hasKey .passage "repo") -}}
# {{-   $passage_repo = .passage.repo -}}
# {{- end -}}
# {{- if and $interactive $use_passage -}}
# {{-   $question := "‚ùî What is your passage repository URL (ex: https://github.com/usename/.passage.git)" -}}
# {{-   $answer := "" -}}
# {{-   if $passage_repo -}}
# {{-     $answer = promptString $question $passage_repo -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $passage_repo = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ passage repo set as '%s'\n" $passage_repo) -}}

# {{- if and (hasKey . "op") (hasKey .op "enabled") -}}
# {{-   $use_1password = .op.enabled -}}
# {{- end -}}
# {{- if and $interactive $sudoer ($minimum | not) -}}
# {{-   $question := "‚ùî Do you want to use 1password for secrets" -}}
# {{-   $use_1password = promptBool $question $use_1password -}}
# {{- end -}}
# {{-   if $use_1password -}}
# {{-     writeToStdout "‚úÖ 1password enabled\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ 1password disabled\n" -}}
# {{-   end -}}

# {{- if and (hasKey . "vault") (hasKey .vault "enabled") -}}
# {{-   $use_vault = .vault.enabled -}}
# {{- end -}}
# {{- if and $interactive $sudoer ($minimum | not) -}}
# {{-   $question := "‚ùî Do you want to use vault for secrets" -}}
# {{-   $use_vault = promptBool $question $use_vault -}}
# {{- end -}}
# {{-   if $use_vault -}}
# {{-     writeToStdout "‚úÖ Vault enabled\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ Vault disabled\n" -}}
# {{-   end -}}

# {{- if and (hasKey . "microk8s") (hasKey .microk8s "enabled") -}}
# {{-   $use_microk8s = .microk8s.enabled -}}
# {{- end -}}
# {{- if and $interactive $sudoer ($minimum | not) -}}
# {{-   $question := "‚ùî Do you want to use MicroK8s for Kubernetes" -}}
# {{-   $use_microk8s = promptBool $question $use_microk8s -}}
# {{- end -}}
# {{-   if $use_microk8s -}}
# {{-     writeToStdout "‚úÖ MicroK8s enabled\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚úÖ MicroK8s disabled\n" -}}
# {{-   end -}}

# {{- if and (hasKey . "github") (hasKey .github "clones") -}}
# {{-   $github_clones = .github.clones -}}
# {{- end -}}
# {{- if and $interactive ($minimum | not) -}}
# {{-   $question := "‚ùî What are your GitHub repositories to clone (input as comma separated list, ex: entelecheia/devcon,entelecheia/ekorpkit)" -}}
# {{-   $answer := "" -}}
# {{-   if $github_clones -}}
# {{-     $answer = promptString $question $github_clones -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $github_clones = $answer -}}
# {{- end -}}
# {{-   writeToStdout (printf "‚úÖ GitHub repositories to clone set as '%s'\n" $github_clones) -}}

# {{-   writeToStdout "\nüí° Tip: you can always make chezmoi ask this again by running `chezmoi init` without `--force`.\n" -}}

# {{- /* This retains the value passed with --source on chezmoi init, which is used in the ../install.sh script */ -}} #
sourceDir: "{{ .chezmoi.workingTree }}"

verbose: {{ $verbose | not | not }}

diff:
    exclude:
        - always
status:
    exclude:
        - always

encryption: age
age:
    identity: {{ $age_keyfile | quote }}
    recipients: ['{{- $age_recipients | replaceAllRegex "," "', '" -}}']

# {{- /* Here we "export" the variables, so we can access them outside this file */ -}} #
data:
    name: {{ $name | quote }}
    email: {{ $email | quote }}
    editor: "vi"
    system:
        auto_update: {{ $auto_update }}
        verbose: {{ $verbose }}
        hostname: {{ $hostname | quote }}
        is_wsl: {{ $wsl }}
        is_devcontainer: {{ $devcontainer }}
        is_minimum: {{ $minimum }}
        is_gnome: {{ $gnome }}
        is_interactive: {{ $interactive }}
        is_sudoer: {{ $sudoer }}
        apply_rootmoi: {{ and $apply_rootmoi $sudoer }}
        uname_arch: {{ output "uname" "-m" | trim | quote }}
        cpu:
            cores: {{ $cpuCores }}
            threads: {{ $cpuThreads }}
    ssh:
        home: {{ $ssh_homedir | quote }}
        algorithm: {{ $ssh_algorithm | quote }}
        identity_file: {{ $ssh_keyfile | quote }}
        authorized_keys: "authorized_keys"
    age:
        identity_file: {{ $age_keyfile | quote }}
        authorized_age_keys: "authorized_age_keys"
    gnupg:
        home: {{ $gpg_homedir | quote }}
        key_id_file: {{ $gpg_key_id_file | quote }}
        key_id: {{ $gpg_key_id | quote }}
        passphrase: {{ $gpg_passphrase | quote }}
        gitsign: {{ $git_commit_gpgsign }}
    git:
        gpgsign: {{ $git_commit_gpgsign }}
        gpg_format: ssh
        ssh_allowed_signers: "allowed_signers"
    github:
        username: {{ $github_username | quote }}
        token: {{ $github_token | quote }}
        clones: {{ $github_clones | quote }}
    dotdrop:
        enabled: {{ $use_dotdrop }}
        repo: {{ $dotdrop_repo | quote }}
        config_dir: {{ $dotdrop_config_dir | quote }}
        config_file: {{ $dotdrop_config_file | quote }}
        root_config_file: {{ $dotdrop_root_config_file | quote }}
        user_profile: {{ $dotdrop_user_profile | quote }}
        root_profile: "root"
    docker:
        repo: {{ $dockerfiles_repo | quote }}
        share_dir: {{ $dockerfiles_share_dir | quote }}
        username: {{ $docker_username | quote }}
    pass:
        enabled: {{ $use_pass }}
        store_dir: {{ $pass_store_dir | quote }}
        repo: {{ $pass_repo | quote }}
    passage:
        enabled: {{ $use_passage }}
        store_dir: {{ $passage_store_dir | quote }}
        repo: {{ $passage_repo | quote }}
        share_dir: {{ $passage_share_dir | quote }}
        share_repo: "https://github.com/FiloSottile/passage.git"
    code:
        enabled: {{ $use_code }}
    autorestic:
        enabled: {{ $use_autorestic }}
        config_file: {{ $autorestic_config_file | quote }}
        location: {{ $autorestic_location | quote }}
        backup_dotfiles: {{ $autorestic_backup_dotfiles }}
        restore_dotfiles: {{ $autorestic_restore_dotfiles }}
        restore_to: {{ $autorestic_restore_to | quote }}
    microk8s:
        enabled: {{ $use_microk8s }}
    vault:
        enabled: {{ $use_vault }}
    op:
        enabled: {{ $use_1password }}
        account: {{ $op_account | quote }}
        vault: {{ $op_vault | quote }}
        connect_host: {{ $op_connect_host | quote }}
        connect_token: {{ $op_connect_token | quote }}
    workspace:
        name: {{ $workspace_name | quote }}
        location: {{ $workspace_location | quote }}
        root: {{ $workspace_root | quote }}
        home: {{ $workspace_home | quote }}
        move_existing: true
        symlink_to_home: {{ $symlink_to_home }}
        symlink_colab_workspace: {{ $symlink_colab_workspace }}
        colab_drive: "/content/drive/MyDrive"
        project_dir: {{ $project_dir | quote }}
        reference_dir: {{ $reference_dir | quote }}
# {{ if $wsl }}
        winhome: {{ $winhome | quote }}
# {{ end }}
    github_repos:
# {{- if $github_clones -}}
# {{- range (split "," $github_clones) -}} #
        - name: {{.}}
          url: https://github.com/{{.}}.git 
# {{- end -}}
# {{- end -}}
