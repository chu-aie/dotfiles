DOTFILES_VERSION: 0.17.8
packages:
  - name: 1password-cli
    apt: true
    brewcask: true
    keyring_file: 1password-archive-keyring.gpg
    keyring_url: https://downloads.1password.com/linux/keys/1password.asc
    source_list_file: 1password.list
    source_list_line: "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main"
    scope: optional
    allow_upgrade: true
  - name: age
    brew: true
    scope: minimal
  - name: apt-transport-https
    apt: true
    scope: minimal
  - name: autorestic
    brew: true
    script: true
    script_cmd: install-autorestic
    scope: optional
  - name: bazel
    apt: true
    keyring_file: bazel-archive-keyring.gpg
    keyring_url: https://bazel.build/bazel-release.pub.gpg
    source_list_file: bazel.list
    source_list_line: "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8"
    scope: full
  - name: build-essential
    apt: true
    scope: minimal
  - name: bzip2
    apt: true
    brew: true
    scope: minimal
  - name: code
    apt: true
    keyring_file: packages.microsoft.gpg
    keyring_url: https://packages.microsoft.com/keys/microsoft.asc
    source_list_file: vscode.list
    source_list_line: "deb [arch=amd64,arm64,armhf signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main"
    scope: optional
  - name: code-cli
    brew: true
    scope: optional
  - name: commitizen
    pipx: true
    check_installed: command -v cz &>/dev/null
    scope: optional
  - name: containerd.io
    apt: true
    scope: system
  - name: coreutils
    brew: true
    scope: minimal
  - name: copier
    brew: true
    pipx: true
    scope: minimal
    allow_upgrade: true
  - name: cz-conventional-gitmoji
    pipx: true
    check_installed: command -v gitmojify &>/dev/null
    scope: optional
  - name: direnv
    apt: true
    brew: true
    scope: minimal
  - name: docker-ce
    apt: true
    apt_remove: docker
    keyring_file: docker.gpg
    keyring_url: https://download.docker.com/linux/ubuntu/gpg
    source_list_file: docker.list
    source_list_line: "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    scope: system
  - name: docker-ce-cli
    apt: true
    scope: system
  - name: docker-compose-plugin
    apt: true
    scope: system
  - name: doppler
    apt: true
    brew: true
    keyring_file: doppler-archive-keyring.gpg
    keyring_url: https://packages.doppler.com/public/cli/gpg.DE2A7741A397C129.key
    source_list_file: doppler-cli.list
    source_list_line: "deb [signed-by=/usr/share/keyrings/doppler-archive-keyring.gpg] https://packages.doppler.com/public/cli/deb/debian any-version main"
    scope: optional
  - name: dotdrop
    brew: true
    pipx: true
    scope: optional
    allow_upgrade: true
  - name: fig
    brew: true
    scope: optional
  - name: file
    apt: true
    scope: minimal
  - name: findutils
    brew: true
    scope: minimal
  - name: font-fira-code
    brewcask: true
    brewtab: homebrew/cask-fonts
    scope: minimal
  - name: font-fira-code-nerd-font
    brewcask: true
    brewtab: homebrew/cask-fonts
    scope: minimal
  - name: fzf
    apt: true
    brew: true
    scope: minimal
    allow_upgrade: true
  - name: gh
    apt: true
    brew: true
    keyring_file: githubcli-archive-keyring.gpg
    keyring_url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
    source_list_file: github-cli.list
    source_list_line: "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
    scope: minimal
    allow_upgrade: true
  - name: git
    apt: true
    brew: true
    scope: minimal
    allow_upgrade: true
  - name: git-lfs
    apt: true
    brew: true
    scope: minimal
    repository_script: https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh
    source_list_file: github_git-lfs.list
    allow_upgrade: true
  - name: git-sizer
    apt: true
    brew: true
    scope: minimal
  - name: git-workspace
    brew: true
    scope: optional
  - name: google-cloud-cli
    apt: true
    keyring_file: cloud.google.gpg
    keyring_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    source_list_file: google-cloud-sdk.list
    source_list_line: "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main"
    scope: optional
  - name: google-perftools
    apt: true
    scope: full
  - name: gnupg
    brew: true
    scope: minimal
  - name: go
    brew: true
    script: true
    script_cmd: install-go
    current_version: "$(go version | awk '{print $3}')"
    latest_version: "$(curl -s 'https://go.dev/VERSION?m=text')"
    scope: minimal
    allow_upgrade: true
  - name: go-age
    script: true
    script_cmd: go install filippo.io/age/cmd/...@latest
    script_prereqs: "source ${HOME}/.config/shrc/00-dotfiles-export"
    check_prereqs: "command -v go &> /dev/null"
    check_installed: command -v age &>/dev/null
    current_version: "age --version | cut -d' ' -f2"
    latest_version: $(curl -s https://api.github.com/repos/FiloSottile/age/releases/latest | grep tag_name | cut -d '"' -f4)
    scope: minimal
  - name: go-sops
    script: true
    script_cmd: go install go.mozilla.org/sops/v3/cmd/sops@latest
    script_prereqs: "source ${HOME}/.config/shrc/00-dotfiles-export"
    check_prereqs: "command -v go &> /dev/null"
    check_installed: command -v sops &>/dev/null
    current_version: "sops --version | awk '{print $NF}'"
    latest_version: $(curl -s https://api.github.com/repos/mozilla/sops/releases/latest | grep 'tag_name' | cut -d'"' -f4)
    scope: minimal
  - name: go-task
    brew: true
    script: true
    script_cmd: install-go-task
    check_installed: command -v task &>/dev/null
    current_version: $(task --version | awk '{print $3}')
    latest_version: $(curl -s https://api.github.com/repos/go-task/task/releases/latest | grep 'tag_name' | cut -d'"' -f4)
    completion_file: ${HOME}/.local/share/zsh/site-functions/_task
    completion_url: https://raw.githubusercontent.com/go-task/task/main/completion/zsh/_task
    scope: minimal
    allow_upgrade: true
  - name: gpa
    apt: true
    scope: gui
  - name: gpg-suite
    brewcask: true
    scope: gui
  - name: helm
    apt: true
    brew: true
    keyring_file: helm.gpg
    keyring_url: https://baltocdn.com/helm/signing.asc
    source_list_file: helm-stable-debian.list
    source_list_line: "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"
    scope: optional
  - name: inxi
    apt: true
    brew: true
    scope: system
  - name: jq
    apt: true
    brew: true
    scope: minimal
  - name: linux-generic-hwe-18.04
    apt: true
  - name: linux-generic-hwe-20.04
    apt: true
  - name: locales
    apt: true
    scope: minimal
  - name: locales-all
    apt: true
    scope: minimal
  - name: lsb-release
    apt: true
    scope: minimal
  - name: microk8s
    brew: true
    snap: true
    post_install: id -nG "${USER}" | grep -qw microk8s || sudo usermod -a -G microk8s "${USER}"
    scope: optional
  - name: mypy
    pipx: true
    check_installed: command -v dmypy &>/dev/null
    scope: optional
  - name: neofetch
    apt: true
    brew: true
    scope: system
  - name: ngrok
    apt: true
    gpg_key_file: ngrok.asc
    gpg_key_url: https://ngrok-agent.s3.amazonaws.com/ngrok.asc
    source_list_file: ngrok.list
    source_list_line: "deb https://ngrok-agent.s3.amazonaws.com buster main"
    scope: optional
  - name: node
    brew: true
    scope: minimal
  - name: nox
    pipx: true
    pipx_extra: nox-poetry
    scope: optional
  - name: nvidia-container-toolkit
    apt: true
    keyring_file: nvidia-container-toolkit-keyring.gpg
    keyring_url: https://nvidia.github.io/libnvidia-container/gpgkey
    source_list_file: nvidia-container-toolkit.list
    source_list_line: "deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://nvidia.github.io/libnvidia-container/stable/$(. /etc/os-release;echo $ID$VERSION_ID'/$(ARCH)') /"
    scope: system
  - name: nvm
    script: true
    script_cmd: "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash"
    check_installed: "[[ -f ${HOME}/.nvm/nvm.sh ]]"
    scope: minimal
  - name: openssh-server
    apt: true
    scope: full
  - name: pass
    apt: true
    brew: true
    scope: minimal
  - name: pinentry-curses
    apt: true
    scope: gui
  - name: pinentry-mac
    brew: true
    scope: gui
  - name: pip
    pip: true
    scope: minimal
    allow_upgrade: true
  - name: pipx
    brew: true
    pip: true
    scope: minimal
    allow_upgrade: true
  - name: poetry
    brew: true
    script: true
    script_cmd: curl -sSL https://install.python-poetry.org | python3 -
    scope: minimal
  - name: poethepoet
    pipx: true
    check_installed: command -v poe &>/dev/null
    scope: minimal
    allow_upgrade: true
  - name: pre-commit
    pipx: true
    scope: optional
    allow_upgrade: true
  - name: procps
    apt: true
    scope: minimal
  - name: python3-dev
    apt: true
    scope: minimal
  - name: python3-pip
    apt: true
    scope: minimal
  - name: python3-setuptools
    apt: true
    scope: minimal
  - name: python3-testresources
    apt: true
    scope: minimal
  - name: python3-venv
    apt: true
    scope: minimal
  - name: restic
    brew: true
    scope: optional
  - name: rust
    script: true
    script_cmd: "curl https://sh.rustup.rs -sSf | sh -s -- -y --profile=minimal"
    check_installed: "command -v rustup &> /dev/null"
    scope: minimal
  - name: sdkman
    script: true
    script_cmd: "curl -s 'https://get.sdkman.io' | bash"
    check_prereqs: "command -v unzip &> /dev/null"
    check_installed: "[[ -f ${HOME}/.sdkman/bin/sdkman-init.sh ]]"
    scope: minimal
  - name: seahorse
    apt: true
    scope: gui
  - name: serviceman
    script: true
    script_cmd: webi serviceman
    check_prereqs: "command -v webi &> /dev/null"
    scope: optional
  - name: setuptools
    pip: true
    scope: minimal
    allow_upgrade: true
  - name: snapd
    apt: true
    scope: full
  - name: sops
    brew: true
    scope: minimal
  - name: stow
    apt: true
    brew: true
    scope: optional
  - name: tree
    apt: true
    brew: true
    scope: minimal
  - name: tmux
    apt: true
    brew: true
    scope: minimal
    allow_upgrade: true
  - name: tzdata
    apt: true
    scope: minimal
  - name: unzip
    apt: true
    brew: true
    scope: minimal
  - name: vim
    apt: true
    scope: minimal
  - name: xclip
    apt: true
    scope: gui
  - name: yq
    brew: true
    script: true
    script_cmd: install-yq
    scope: minimal
  - name: webi
    script: true
    script_cmd: curl https://webi.sh/webi | sh
    cmd_name: webi
    scope: gui
  - name: wheel
    pip: true
    scpoe: minimal
  - name: wslu
    apt: true
  - name: zip
    apt: true
    scope: minimal
  - name: zsh
    apt: true
    brew: true
    scope: minimal
