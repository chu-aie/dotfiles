#!/bin/bash
# {{ if and (eq .chezmoi.os "linux" "darwin") (.system.is_sudoer) (.system.is_minimum | not) }}

# {{ include (joinPath .chezmoi.sourceDir ".chezmoitemplates/scripts-library") }}

# The following line is for ShellCheck to correctly identify the above included library
true || source ../.chezmoitemplates/scripts-library

# {{ if .system.use_vault -}}
# if brew is installed, then install vault
if brew --version &>/dev/null; then
  package="vault"
  if ! is_brew_package_installed "${package}"; then
    log_task "Installing Hashicorp Vault"
    c brew tap hashicorp/tap
    c brew install hashicorp/tap/vault  
  fi
fi
# {{ end }}

# {{ if .system.use_microk8s -}}
# if snap is installed, then install microk8s
if snap --version &>/dev/null; then
  package="microk8s"
  if ! is_snap_package_installed "${package}"; then
    log_task "Installing MicroK8s"
    c sudo snap install microk8s --classic
  fi
elif brew --version &>/dev/null; then
  package="microk8s"
  if ! is_brew_package_installed "${package}"; then
    log_task "Installing MicroK8s"
    c brew install ubuntu/microk8s/microk8s
    log_manual_action "MicroK8s installed, but not finished. To finish the installation, run the following command: microk8s install"
  fi
fi
# {{ end }}

# {{ if .system.use_dotdrop }}
if ! command -v dotdrop >/dev/null; then
  log_task "Install dotdrop with pip3"
  c /usr/bin/pip3 install wheel
  c /usr/bin/pip3 install dotdrop --user
  # Add ~/.local/bin to PATH in order to use dotdrop before finishing the installation
  export PATH="$HOME/.local/bin:$PATH"
fi

# Clone or update the dotdrop repository
DOTDROP_REPO="{{- .dotdrop.repo }}"
DOTDROP_LOCAL_REPO="{{- .chezmoi.workingTree }}/dotdrop"
DOTDROP_REPO_DIR="${HOME}/.config/dotdrop"
if [ ! -d "$DOTDROP_REPO_DIR" ]; then
  # if DOTDROP_REPO does not start with "https://" or "git@" then it is a local repository
  if [[ "$DOTDROP_REPO" != "https://"* ]] && [[ "$DOTDROP_REPO" != "git@"* ]]; then
    # Copy the local dotdrop repository to ~/.config/dotdrop
    log_task "Copy dotdrop repository"
    c cp -r "$DOTDROP_LOCAL_REPO" "$DOTDROP_REPO_DIR"
  else
    log_task "Clone dotdrop repository"
    c git clone "$DOTDROP_REPO" "$DOTDROP_REPO_DIR"
  fi
else
  if [[ "$DOTDROP_REPO" != "https://"* ]] && [[ "$DOTDROP_REPO" != "git@"* ]]; then
    log_info "dotdrop repository already exists"
  else
    # if existing dotdrop repository is not a git repository then remove it
    if ! git -C "$DOTDROP_REPO_DIR" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      log_task "Remove dotdrop repository"
      c rm -rf "$DOTDROP_REPO_DIR"
      log_task "Clone dotdrop repository"
      c git clone "$DOTDROP_REPO" "$DOTDROP_REPO_DIR"
    # otherwise update the dotdrop repository
    else
      log_task "Update dotdrop repository"
      c git -C "$DOTDROP_REPO_DIR" pull
    fi
  fi
fi
# {{ end }}

# {{ end }}
