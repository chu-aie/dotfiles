#!/bin/bash
# {{ if eq .chezmoi.os "linux" "darwin" }}

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../.chezmoitemplates/scripts-library

ensure_path_entry "${HOME}/.local/bin"

# {{ if .github.username }}
# {{ if .github.token }}
if command -v gh >/dev/null; then
    log_info "Logging in to GitHub"
    GITHUB_TOKEN="{{ .github.token }}"
    c gh config set -h github.com git_protocol ssh
    echo "${GITHUB_TOKEN}" | gh auth login --with-token
    c gh auth setup-git
else
    log_info "gh is not installed"
fi
# {{ else }}
# {{   if .system.is_interactive }}
if command -v gh >/dev/null; then
    log_info "Logging in to GitHub"
    log_info "If you choose to login with a web browser and the device page is not displayed, please open the following URL in your browser: "
    log_info " > https://github.com/login/device"
    c gh auth login -h github.com -s admin:public_key -s write:gpg_key
    # git credention setup
    c gh auth setup-git
else
    log_info "gh is not installed"
fi
# {{   else }}
log_manual_action "GITHUB_TOKEN environment variable is not set."
log_manual_action "Log in manually, and add the SSH key to GitHub."
# {{   end }}

# {{ end }}
# {{ end -}}

# {{ if .dotdrop.enabled }}

# Clone or update the dotdrop repository (github auth is required for private repositories)
DOTDROP_REPO="{{- .dotdrop.repo }}"
DOTDROP_LOCAL_REPO="{{- .chezmoi.workingTree }}/dotdrop"
DOTDROP_REPO_DIR="${HOME}/.config/dotdrop"
if [ ! -d "$DOTDROP_REPO_DIR" ]; then
  # if DOTDROP_REPO does not start with "https://" or "git@" then it is a local repository
  if [[ "$DOTDROP_REPO" != "https://"* ]] && [[ "$DOTDROP_REPO" != "git@"* ]]; then
    # Copy the local dotdrop repository to ~/.config/dotdrop
    log_task "Copy dotdrop repository"
    c cp -r "$DOTDROP_LOCAL_REPO" "$DOTDROP_REPO_DIR"
  else
    log_task "Clone dotdrop repository"
    c git clone "$DOTDROP_REPO" "$DOTDROP_REPO_DIR"
  fi
else
  if [[ "$DOTDROP_REPO" != "https://"* ]] && [[ "$DOTDROP_REPO" != "git@"* ]]; then
    log_info "dotdrop repository already exists"
  else
    # if existing dotdrop repository is not a git repository then remove it
    if ! git -C "$DOTDROP_REPO_DIR" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      log_task "Remove dotdrop repository"
      c rm -rf "$DOTDROP_REPO_DIR"
      log_task "Clone dotdrop repository"
      c git clone "$DOTDROP_REPO" "$DOTDROP_REPO_DIR"
    # otherwise update the dotdrop repository
    else
      log_task "Update dotdrop repository"
      c git -C "$DOTDROP_REPO_DIR" pull
    fi
  fi
fi

if dotdrop --version &>/dev/null; then
  log_task "Updating dotfiles for dotdrop"
  dotdrop --cfg="${HOME}/.config/dotdrop/config-user.yaml" -p "{{ .dotdrop.user_profile }}" install
fi

# {{ end }}

# {{ end -}}
