#!/bin/bash
# {{ if eq .chezmoi.os "linux" "darwin" }}

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../.chezmoitemplates/scripts-library

SSH_HOME="${HOME}/.ssh"
if [ ! -d "${SSH_HOME}" ]; then
    log_task "Creating ${SSH_HOME}"
    mkdir "${SSH_HOME}"
fi

# Check if we have a GitHub SSH key
# If not, generate one and add it to GitHub
SSH_KEY_FILE="${HOME}/.ssh/{{ .ssh.key_filename }}"
HOST="{{ .system.hostname }}"
USER="{{ .chezmoi.username }}"
ALGORITHM="{{ .ssh.algorithm }}"
DATESTAMP=$(date +'%y.%m.%d')
if [ ! -f "${SSH_KEY_FILE}" ]; then
    log_task "Generating SSH key"
    ssh-keygen -t "${ALGORITHM}" -C "${USER}@${HOST}" -f "${SSH_KEY_FILE}" -N ""
fi

# Symlink authorized_keys from .config/ssh to ~/.ssh
# If the file exists, remove the file
log_task "Symlinking authorized_keys"
if [ -f "${HOME}/.ssh/authorized_keys" ]; then
    log_task "Removing existing authorized_keys"
    rm "${HOME}/.ssh/authorized_keys"
fi
# check if symlink exists, if not, create it
if [ ! -L "${HOME}/.ssh/authorized_keys" ]; then
    ln -s "${HOME}/.config/ssh/authorized_keys" "${HOME}/.ssh/authorized_keys"
fi

# copy gitconfig from .config/git/gitconfig to .gitconfig
cp "${HOME}/.config/git/gitconfig" "${HOME}/.gitconfig"

# set eviroment variable GNUPGHOME to ~/.gnupg if not set
GNUPGHOME=${GNUPGHOME:-$HOME/.gnupg}
export GNUPGHOME="${GNUPGHOME}"
KEY_ID_FILE="${GNUPGHOME}/.key_id"
KEY_ID="{{ .gnupg.key_id }}"
GPGSIGN="{{ .gnupg.gitsign }}"

if [ -z "${KEY_ID}" ] && [ -f "${KEY_ID_FILE}" ]; then 
    KEY_ID=$(cat "${KEY_ID_FILE}")
fi
# if KEY_ID is not empty, check if it is a valid key ID
if [ -n "${KEY_ID}" ]; then
    KEY_ID=$(gpg --list-secret-keys --with-colons | grep 'sec' | grep "${KEY_ID}" | cut -d':' -f5)
fi

# {{ if .gnupg.passphrase }}
# Create a batch file
if [ -z "${KEY_ID}" ]; then
    log_task "Generating GPG key"

    # Generate a GPG key
    # https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html
    cat > .tmp_gpg_batch <<EOF
        %echo Generating a basic OpenPGP key
        Key-Type: EDDSA
        Key-Length: 1024
        Key-Curve: ed25519
        Subkey-Type: ECDH
        Subkey-Curve: cv25519
        Name-Real: {{ .name }}
        Name-Comment: generated by chezmoi
        Name-Email: {{ .email }}
        Expire-Date: 0
        Passphrase: {{ .gnupg.passphrase }}
        # Do a commit here, so that we can later print "done" :-)
        %commit
        %echo done
EOF
    c gpg --batch --generate-key .tmp_gpg_batch
    rm .tmp_gpg_batch
    KEY_ID=$(gpg --list-secret-keys --with-colons | grep 'sec' | tail -n 1 | cut -d':' -f5)
    # Save the key ID to a file
    echo "${KEY_ID}" > "${KEY_ID_FILE}"
    # Save public key to a file
    c gpg --armor --export "${KEY_ID}" > "${GNUPGHOME}/${KEY_ID}.pub"
fi
# {{ end }}

log_info "GPG key ID: ${KEY_ID}"
# add gpg key to gitconfig
if [ -n "${KEY_ID}" ]; then
    log_task "Adding GPG key to gitconfig"
    c git config --global user.signingkey "${KEY_ID}"
    if [[ "${GPGSIGN}" == "true" ]]; then
        c git config --global commit.gpgsign true
    fi
fi

# "Adding SSH & GPG keys to GitHub after login"
PUB_SSH_KEY_FILE="${SSH_KEY_FILE}.pub"
PUB_GPG_KEY_FILE="${GNUPGHOME}/${KEY_ID}.pub"

# {{ if .github.username }}
# {{ if .github.token }}
if command -v gh >/dev/null; then
    log_info "Logging in to GitHub"
    GITHUB_TOKEN="{{ .github.token }}"
    c gh config set -h github.com git_protocol ssh
    echo "${GITHUB_TOKEN}" | gh auth login --with-token
    # git credention setup
    c gh auth setup-git
    if [ -f "${PUB_SSH_KEY_FILE}" ]; then
        log_task "Adding SSH key to GitHub"
        c gh ssh-key add "${PUB_SSH_KEY_FILE}" --title "${USER}@${HOST} ${ALGORITHM} ${DATESTAMP}" || true
    fi
    if [ -f "${PUB_GPG_KEY_FILE}" ]; then
        log_task "Adding GPG key to GitHub"
        c gh gpg-key add "${PUB_GPG_KEY_FILE}" || true
    fi
else
    log_info "gh is not installed"
fi
# {{ else }}
# {{   if .system.is_interactive }}
if command -v gh >/dev/null; then
    log_info "Logging in to GitHub"
    c gh auth login -h github.com -s admin:public_key -s write:gpg_key
    # git credention setup
    c gh auth setup-git
    if [ -f "${PUB_SSH_KEY_FILE}" ]; then
        log_task "Adding SSH key to GitHub"
        c gh ssh-key add "${PUB_SSH_KEY_FILE}" --title "${USER}@${HOST} ${ALGORITHM} ${DATESTAMP}" || true
    fi
    if [ -f "${PUB_GPG_KEY_FILE}" ]; then
        log_task "Adding GPG key to GitHub"
        c gh gpg-key add "${PUB_GPG_KEY_FILE}" || true
    fi
else
    log_info "gh is not installed"
fi
# {{   else }}
log_manual_action "GITHUB_TOKEN environment variable is not set."
log_manual_action "Log in manually, and add the SSH key to GitHub."
# {{    end }}
# {{ end }}
log_info "Done adding SSH and GPG keys to GitHub"
# {{ end -}}
# {{ end -}}
