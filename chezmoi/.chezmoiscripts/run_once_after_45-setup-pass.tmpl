#!/bin/bash
# {{ if and (eq .chezmoi.os "darwin" "linux") (.system.is_sudoer) -}}

# {{ template "scripts-library" }}
# {{ template "homebrew-library" }}

# The following line is for ShellCheck to correctly identify the above include
# true || source ../.chezmoitemplates/scripts-library
# true || source ../.chezmoitemplates/homebrew-library

# set eviroment variable GNUPGHOME to ~/.gnupg if not set
GNUPGHOME="{{ .gnupg.home }}"
export GNUPGHOME="${GNUPGHOME}"
GPG_KEY_ID_FILE="{{ .gnupg.key_id_file }}"
if [ -e "${GPG_KEY_ID_FILE}" ]; then 
  GPG_KEY_ID=$(cat "${GPG_KEY_ID_FILE}")
  export GPG_KEY_ID="${GPG_KEY_ID}"
  export PASSWORD_STORE_KEY="${GPG_KEY_ID}"
fi

# age key
AGE_KEY_FILE="{{ .age.identity_file }}"
if [ -e "${AGE_KEY_FILE}" ]; then
  export AGE_KEY_FILE="${AGE_KEY_FILE}"
  export SOPS_AGE_KEY_FILE="${AGE_KEY_FILE}"
  export PASSAGE_IDENTITIES_FILE="${AGE_KEY_FILE}"
  if command -v age-keygen >/dev/null 2>&1; then
    AGE_RECIPIENT=$(age-keygen -y "${AGE_KEY_FILE}")
    export AGE_RECIPIENT="${AGE_RECIPIENT}"
  fi
fi
if [[ -e "${HOME}/.ssh/authorized_age_keys" ]]; then
  AGE_RECIPIENTS="$(sed -n '/^age1/p' "${HOME}/.ssh/authorized_age_keys" | sort -u | sed 'H;1h;$!d;x;y/\n/,/')"
  export AGE_RECIPIENTS="${AGE_RECIPIENTS}"
  export SOPS_AGE_RECIPIENTS="${AGE_RECIPIENTS}"
  # replace commas with spaces from AGE_RECIPIENTS
  PASSAGE_RECIPIENTS=$(echo "${AGE_RECIPIENTS}" | tr ',' ' ')
  export PASSAGE_RECIPIENTS="${PASSAGE_RECIPIENTS}"
fi

# Environment variables
# ---------------------
# PASSWORD_STORE_DIR                        Overrides the default password storage directory.
# PASSWORD_STORE_KEY                        Overrides the default gpg key identification set by init. Keys must not contain spaces and thus use of the hexadecimal key signature is recommended. Multiple keys may be specified separated by spaces.
# PASSWORD_STORE_GPG_OPTS                   Additional options to be passed to all invocations of GPG.
# PASSWORD_STORE_X_SELECTION                Overrides the selection passed to xclip, by default clipboard. See xclip(1) for more info.
# PASSWORD_STORE_CLIP_TIME                  Specifies the number of seconds to wait before restoring the clipboard, by default 45 seconds.
# PASSWORD_STORE_UMASK                      Sets the umask of all files modified by pass, by default 077.
# PASSWORD_STORE_GENERATED_LENGTH           The default password length if the pass-length parameter to generate is unspecified.
# PASSWORD_STORE_CHARACTER_SET              The character set to be used in password generation for generate. This value is to be interpreted by tr. See tr(1) for more info.
# PASSWORD_STORE_CHARACTER_SET_NO_SYMBOLS   The character set to be used in no-symbol password generation for generate, when --no-symbols, -n is specified. This value is to be interpreted by tr. See tr(1) for more info.
# PASSWORD_STORE_ENABLE_EXTENSIONS          This environment variable must be set to "true" for extensions to be enabled.
# PASSWORD_STORE_EXTENSIONS_DIR             The location to look for executable extension files, by default PASSWORD_STORE_DIR/.extensions.
# PASSWORD_STORE_SIGNING_KEY                If this environment variable is set, then all .gpg-id files and non-system extension files must be signed using a detached signature using the GPG key specified by the full 40 character upper-case fingerprint in this variable. If multiple fingerprints are specified, each separated by a whitespace character, then signatures must match at least one. The init command will keep signatures of .gpg-id files up to date.

# {{ if .pass.enabled }}
# Clone or update the pass repository (github auth is required for private repositories)
PASS_REPO="{{ .pass.repo }}"
PASSWORD_STORE_DIR="{{ .pass.store_dir }}"
export PASSWORD_STORE_DIR="${PASSWORD_STORE_DIR}"
# if gpg-id file exists in the password-store dir, then pass is already initialized
# However, if the PASSWORD_STORE_KEY is different from the one in the gpg-id file, then reinitialize pass
if [ -d "${PASSWORD_STORE_DIR}" ] && [ -e "${PASSWORD_STORE_DIR}/.gpg-id" ]; then
    if [ -n "${PASSWORD_STORE_KEY}" ]; then
        if ! grep -q "${PASSWORD_STORE_KEY}" "${PASSWORD_STORE_DIR}/.gpg-id"; then
            log_task "Reinitializing pass"
            c pass init "${PASSWORD_STORE_KEY}"
        fi
    else
        log_manual_task "Generate a gpg key and set PASSWORD_STORE_KEY to initialize pass"
    fi
else
    log_task "Initializing pass"
    c pass init "${PASSWORD_STORE_KEY}"
fi
# if git is not initialized, then initialize git
if ! git -C "${PASSWORD_STORE_DIR}" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log_task "Initializing git"
    c pass git init
fi
# if the remote is not set, then set the remote
if ! git -C "${PASSWORD_STORE_DIR}" remote get-url origin >/dev/null 2>&1; then
    log_task "Setting remote"
    c pass git remote add origin "${PASS_REPO}"
fi
# fetch and checkout the main branch
log_task "Fetching and checking out main branch"
c pass git fetch
c pass git checkout main
# set upstream and pull
log_task "Setting upstream and pulling"
c pass git branch --set-upstream-to=origin/main main
c pass git pull --rebase --autostash
# {{ end -}}

# {{ if .passage.enabled }}
# install passage if not installed
if ! command -v passage >/dev/null; then
    log_task "Installing passage"
    PASSGE_PATH="${HOME}/.local/share/passage"
    c cd "${PASSGE_PATH}" || exit 1  
# {{ if and (eq .chezmoi.os "darwin") }}
    c make install PREFIX="$(brew --cellar)/passage/$(git describe --tags)"
    c brew link passage
# {{ else if eq .chezmoi.os "linux" }}
    c sudo make install
# {{ end }}
fi

# Environment variables
# ---------------------
#   PASSAGE_DIR               Password store location
#   PASSAGE_IDENTITIES_FILE   Identities file location
#   PASSAGE_AGE               age binary (tested with age and rage)
#   PASSAGE_RECIPIENTS_FILE   Override recipients for encryption operations
#                             Passed to age with -R
#   PASSAGE_RECIPIENTS        Override recipients for encryption operations
#                             Space separated, each passed to age with -r
PASSAGE_REPO="{{ .passage.repo }}"
PASSAGE_DIR="{{ .passage.store_dir }}"
export PASSAGE_DIR="${PASSAGE_DIR}"
# if git is not initialized, then initialize git
if ! git -C "${PASSAGE_DIR}" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log_task "Initializing git"
    c passage git init
fi
# if the remote is not set, then set the remote
if ! git -C "${PASSAGE_DIR}" remote get-url origin >/dev/null 2>&1; then
    log_task "Setting remote"
    c passage git remote add origin "${PASSAGE_REPO}"
fi
# fetch and checkout the main branch
log_task "Fetching and checking out main branch"
c passage git fetch
c passage git checkout main
# set upstream and pull
log_task "Setting upstream and pulling"
c passage git branch --set-upstream-to=origin/main main
c passage git pull --rebase --autostash
# {{ end -}}

# {{ end -}}
