#!/bin/bash
# {{ if eq .chezmoi.os "darwin" }}
# {{ template "scripts-library" }}
log_task "020. Installing prerequisites for macOS"

readonly wanted_tabs=(
  homebrew/cask-fonts
  homebrew/bundle
  homebrew/cask
  homebrew/cask-fonts
  homebrew/core
  homebrew/services
  # {{ if .vault.enabled }}
  hashicorp/tap
  # {{ end }}
)

# get tab list into BREW_TABS variable
BREW_TABS=$(brew tap)

# install tabs that are not installed
for tab in "${wanted_tabs[@]}"; do
  if ! echo "${BREW_TABS}" | grep -q "^${tab}$"; then
    log_task "Installing brew tab: ${tab}"
    c brew tap "${tab}"
  fi
done

# install packages that are not installed
readonly wanted_packages=(
  coreutils
  findutils
  zsh
  tree
  jq
  gh
  dotdrop
  direnv
  gnupg
  pinentry-mac
  node
  age
  go
  sops
  stow
  pass
  restic
  autorestic
  fzf
  helm
  # {{ if .vault.enabled }}
  hashicorp/tap/vault
  # {{ end }}
  # {{ if .code.enabled }}
  code-cli
  # {{ end }}
  # {{ if .microk8s.enabled }}
  microk8s
  # {{ end }}
)
missing_packages=()

for package in "${wanted_packages[@]}"; do
  if ! is_brew_package_installed "${package}"; then
    missing_packages+=("${package}")
  fi
done

brew_command=(brew)
if [[ ${#missing_packages[@]} -gt 0 ]]; then
  log_task "Installing missing packages with brew: ${missing_packages[*]}"
  # c "${brew_command[@]}" update
  c "${brew_command[@]}" install "${missing_packages[@]}"
fi

readonly wanted_cask_packages=(
  gpg-suite
  font-fira-code
  font-fira-code-nerd-font
  # {{ if .op.enabled }}
  1password-cli
  # {{ end }}
  # {{ if .ngrok.enabled }}
  ngrok
  # {{ end }}
)

# get installed cask packages with brew list --casks
BREW_CASK_PACKAGES=$(brew list --casks)

# install cask packages that are not installed
for package in "${wanted_cask_packages[@]}"; do
  if ! echo "${BREW_CASK_PACKAGES}" | grep -q "^${package}$"; then
    log_task "Installing a package with brew cask: ${package}"
    c "${brew_command[@]}" install --cask "${package}"
  fi
done

# c echo "pinentry-program $(which pinentry-mac)" >> "${HOME}/.gnupg/gpg-agent.conf"
# c killall gpg-agent || true

# {{ end -}}
