#!/bin/bash
# {{ template "scripts-library" }}
# The following line is for ShellCheck to correctly identify the above included library
# true || source ../.chezmoitemplates/scripts-library

# {{ if and (eq .chezmoi.os "linux") (.system.is_sudoer) -}}

# prepare to install githubcli
KEYRING_FILE="/usr/share/keyrings/githubcli-archive-keyring.gpg"
if [[ ! -f "${KEYRING_FILE}" ]]; then
  log_task "Downloading githubcli keyring"
  # {{   if eq .chezmoi.username "root" }}
  c curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o "${KEYRING_FILE}"
  # {{   else }}
  c sudo curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o "${KEYRING_FILE}"
  # {{   end }}
fi
SOURCE_LIST_FILE="/etc/apt/sources.list.d/github-cli.list"
if [[ ! -f "${SOURCE_LIST_FILE}" ]]; then
  log_task "Adding githubcli repository"
  # shellcheck disable=SC1091
  # {{   if eq .chezmoi.username "root" }}
  c chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
  c echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee "$SOURCE_LIST_FILE"
  # {{   else }}
  c sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
  c echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee "$SOURCE_LIST_FILE"
  # {{   end }}
fi

readonly wanted_packages=(
  build-essential
  procps
  file
  jq
  zsh
  tmux
  python3-pip
  python3-setuptools
  golang-go
  gh
  fzf
  vim
  stow
  pass
  gnupg # used to decrypt the gpg keys of the apt repositories
  pinentry-curses
  # {{   if not .system.is_devcontainer }}
  gpa 
  seahorse
  # {{   end }}
)
missing_packages=()

for package in "${wanted_packages[@]}"; do
  if ! is_apt_package_installed "${package}"; then
    missing_packages+=("${package}")
  fi
done

if [[ ${#missing_packages[@]} -gt 0 ]]; then
  log_task "Installing missing packages with APT: ${missing_packages[*]}"

  # This script also gets called when running rootmoi
  # {{   if eq .chezmoi.username "root" }}
  apt_command=(apt)
  # {{   else }}
  apt_command=(sudo apt)
  # {{   end }}

  c "${apt_command[@]}" update
  c "${apt_command[@]}" install --yes --no-install-recommends "${missing_packages[@]}"
fi

# check if snap is installed
if snap --version &>/dev/null; then

  readonly wanted_sanp_packages=(
    helm
  )

  # {{   if eq .chezmoi.username "root" }}
  snap_command=(snap)
  # {{   else }}
  snap_command=(sudo snap)
  # {{   end }}

  for package in "${wanted_sanp_packages[@]}"; do
    if ! is_snap_package_installed "${package}"; then
      log_task "Installing a package with snap: ${package}"
      c "${snap_command[@]}" install "${package}" --classic
    fi
  done

else
  log_manual_action "snap is not installed, skipping snap packages"
fi

# install autorestic
if ! autorestic --version &>/dev/null; then
  log_task "Installing autorestic"
  c wget -qO - https://raw.githubusercontent.com/cupcakearmy/autorestic/master/install.sh | sudo bash
fi

# {{ end -}}
# {{ if and (eq .chezmoi.os "linux") -}}
ensure_path_entry "/usr/local/go/bin"

if ! go version &>/dev/null; then
  log_manual_action "go is not installed, skipping go packages"
  exit 0
fi

# install age
if ! age --version &>/dev/null; then
  log_task "Installing age"
  c go install filippo.io/age/cmd/...@latest
fi

# install sops
if ! sops --version &>/dev/null; then
  log_task "Installing sops"
  c go install go.mozilla.org/sops/v3/cmd/sops@latest
fi

# {{ end -}}
