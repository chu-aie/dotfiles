#!/bin/bash
# {{ if and (eq .chezmoi.os "linux") .system.is_sudoer }}
# {{ template "scripts-library" }}
log_task "020. Installing prerequisites for Linux"

# prepare to install githubcli
KEYRING_FILE="/usr/share/keyrings/githubcli-archive-keyring.gpg"
if [[ ! -f "${KEYRING_FILE}" ]]; then
  log_task "Downloading githubcli keyring"
  # {{   if eq .chezmoi.username "root" }}
  c curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o "${KEYRING_FILE}"
  # {{   else }}
  c sudo curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o "${KEYRING_FILE}"
  # {{   end }}
fi
SOURCE_LIST_FILE="/etc/apt/sources.list.d/github-cli.list"
if [[ ! -f "${SOURCE_LIST_FILE}" ]]; then
  log_task "Adding githubcli repository"
  # shellcheck disable=SC1091
  # {{   if eq .chezmoi.username "root" }}
  c chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
  c echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee "$SOURCE_LIST_FILE"
  # {{   else }}
  c sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
  c echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee "$SOURCE_LIST_FILE"
  # {{   end }}
fi

# {{ if .op.enabled }}
SOURCE_LIST_FILE="/etc/apt/sources.list.d/1password.list"
if [[ ! -e "${SOURCE_LIST_FILE}" ]]; then
  log_task "Adding 1password repository"
  curl -sS https://downloads.1password.com/linux/keys/1password.asc |
    sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/$(dpkg --print-architecture) stable main" |
    sudo tee "$SOURCE_LIST_FILE"
  sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
  curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol |
    sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
  sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
  curl -sS https://downloads.1password.com/linux/keys/1password.asc |
    sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
fi
# {{ end }}

# {{ if .code.enabled }}
SOURCE_LIST_FILE="/etc/apt/sources.list.d/vscode.list"
if [[ ! -e "${SOURCE_LIST_FILE}" ]]; then
  c wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >packages.microsoft.gpg
  c sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
  c sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
  c rm -f packages.microsoft.gpg
fi
# {{ end }}

# {{ if .ngrok.enabled }}
SOURCE_LIST_FILE="/etc/apt/sources.list.d/ngrok.list"
if [[ ! -e "${SOURCE_LIST_FILE}" ]]; then
  c curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
  c echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
fi
# {{ end }}

readonly wanted_packages=(
  apt-transport-https
  build-essential
  tzdata
  locales
  locales-all
  procps
  file
  jq
  zsh
  tmux
  python3-pip
  python3-dev
  python3-setuptools
  python3-venv
  gh
  fzf
  direnv
  vim
  stow
  pass
  xclip
  gnupg # used to decrypt the gpg keys of the apt repositories
  pinentry-curses
  # {{ if not .system.is_devcontainer }}
  gpa
  seahorse
  # {{ end }}
  # {{ if .op.enabled }}
  1password-cli
  # {{ end }}
  # {{ if .code.enabled }}
  code
  # {{ end }}
  # {{ if .ngrok.enabled }}
  ngrok
  # {{ end }}
)
missing_packages=()

for package in "${wanted_packages[@]}"; do
  if ! is_apt_package_installed "${package}"; then
    missing_packages+=("${package}")
  fi
done

if [[ ${#missing_packages[@]} -gt 0 ]]; then
  log_task "Installing missing packages with APT: ${missing_packages[*]}"

  # This script also gets called when running rootmoi
  # {{   if eq .chezmoi.username "root" }}
  apt_command=(apt)
  # {{   else }}
  apt_command=(sudo apt)
  # {{   end }}

  c "${apt_command[@]}" update --yes -qq -o=Dpkg::Use-Pty=0
  c "${apt_command[@]}" install --yes -qq -o=Dpkg::Use-Pty=0 --no-install-recommends "${missing_packages[@]}"
fi

# Set up locales
# check if locale is already set up by running locale | grep LC_ALL | grep en_US.UTF-8
if ! locale | grep LC_ALL | grep -q en_US.UTF-8; then
  log_task "Setting up locales"
  # {{   if eq .chezmoi.username "root" }}
  c localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true
  # {{   else }}
  c sudo localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true
  # {{   end }}
fi

# install autorestic
if ! autorestic --version &>/dev/null; then
  log_task "Installing autorestic"
  c wget -qO - https://raw.githubusercontent.com/cupcakearmy/autorestic/master/install.sh | sudo bash
fi

# install yq
if ! yq --version &>/dev/null; then
  log_task "Installing yq"
  c sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
fi

# {{ end -}}
