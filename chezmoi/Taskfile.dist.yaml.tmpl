version: "3"

tasks:
  default:
    deps:
      - task: task-ls

  greet:
    cmds:
      - echo $GREETING
    env:
      GREETING: Hey, there!

  task-ls:
    desc: List available tasks
    cmds:
      - task --list

  tmux-new:
    desc: Create a new tmux session
    cmds:
      - tmux new -s {{"{{.CLI_ARGS}}"}}

  tmux-ls:
    desc: List tmux sessions
    cmds:
      - tmux ls

  tmux-attach:
    desc: Attach to a tmux session
    cmds:
      - tmux attach -t {{"{{.CLI_ARGS}}"}}

  sysinfo:
    desc: Print system information
    cmds:
      - neofetch

  code-tunnel:
    desc: Create a tunnel to a remote VS Code instance
    cmds:
      - code tunnel --accept-server-license-terms

  poetry-disable-virtualenvs:
    desc: Disable virtualenvs in poetry
    cmds:
      - poetry config virtualenvs.create false

  poetry-enable-virtualenvs:
    desc: Enable virtualenvs in poetry
    cmds:
      - poetry config virtualenvs.create true

  mkvenv:
    desc: "Create a virtualenv: mkvenv -- name"
    cmds:
      - mkvirtualenv {{"{{.CLI_ARGS}}"}}

  workon:
    desc: "Activate a virtualenv: workon -- name"
    cmds:
      - workon {{"{{.CLI_ARGS}}"}}

  rmvenv:
    desc: "Remove a virtualenv: rmvenv -- name"
    cmds:
      - rmvirtualenv {{"{{.CLI_ARGS}}"}}

{{- if .lfs_folderstore.enabled | not | not }}
  lfs-folderstore-init:
    desc: Initialize the LFS folderstore for the current Git repository
    cmds:
      - git config --add lfs.customtransfer.lfs-folder.path "${HOME}/.local/bin/lfs-folderstore"
      - git config --add lfs.customtransfer.lfs-folder.args "{{ .lfs_folderstore.store_dir }}"
      - git config --add lfs.standalonetransferagent lfs-folder
      - git config lfs.url "https://localhost"
{{- end }}

{{- if eq .chezmoi.os "linux" }}
  restart-docker-daemon:
    desc: Restart the Docker daemon
    cmds:
      - restart-docker-daemon

  watch-nvidia-smi:
    desc: Watch nvidia-smi output every second (useful for monitoring GPU usage)
    cmds:
      - watch -n 1 nvidia-smi

  dns-status:
    desc: Check the status of the DNS resolver
    cmds:
      - resolvectl status | grep "DNS Server" -A2

  sysinfo-inxi:
    desc: Print system information using inxi
    cmds:
      - inxi -F
{{- end }}
