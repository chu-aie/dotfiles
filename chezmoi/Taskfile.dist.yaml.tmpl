version: "3"

includes:
  user:
    taskfile: .Taskfile.yml
    optional: true

tasks:
  default:
    deps:
      - task: task-ls

  greet:
    cmds:
      - echo $GREETING
    env:
      GREETING: Hey, there!

  task-ls:
    desc: List available tasks
    cmds:
      - task --list

  clone-global-taskfile:
    desc: Clone the global Taskfile.dist.yaml to the current directory
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - cp $HOME/Taskfile.dist.yaml Taskfile.dist.yaml

  grep-process:
    desc: Grep for a process
    cmds:
      - ps aux | grep {{"{{.CLI_ARGS}}"}}

  grep-process-and-kill:
    desc: Grep for a process and kill it
    cmds:
      - ps aux | grep {{"{{.CLI_ARGS}}"}} | awk {{"'{print $2}'"}} | xargs kill -9

  tmux-new:
    desc: Create a new tmux session
    cmds:
      - tmux new -s {{"{{.CLI_ARGS}}"}}

  tmux-ls:
    desc: List tmux sessions
    cmds:
      - tmux ls

  tmux-attach:
    desc: Attach to a tmux session
    cmds:
      - tmux attach -t {{"{{.CLI_ARGS}}"}}

  sysinfo:
    desc: Print system information
    cmds:
      - neofetch

  vscode-tunnel:
    desc: Create a tunnel to a remote VS Code instance
    cmds:
      - code tunnel --accept-server-license-terms

  vscode-copy-extentions-config:
    desc: Copy the VS Code extensions in the config directory to the current project
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - mkdir -p .vscode && cp ~/.config/vscode/extensions.json .vscode/extensions.json
    status:
      - test -d .vscode
      - test -f .vscode/extensions.json
    preconditions:
      - test -f ~/.config/vscode/extensions.json

  poetry-disable-virtualenvs:
    desc: Disable virtualenvs in poetry
    cmds:
      - poetry config virtualenvs.create false

  poetry-enable-virtualenvs:
    desc: Enable virtualenvs in poetry
    cmds:
      - poetry config virtualenvs.create true

  python-keyring-disable:
    desc: Disable keyring in Python
    cmds:
      - export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring

  init-hyperfast-project:
    desc: Create a new project using the hyperfast template
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - copier copy --UNSAFE gh:entelecheia/hyperfast-template .

  init-hyfi-project:
    desc: Create a new project using the hyfi template
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - copier copy --UNSAFE --data 'code_template_source=gh:entelecheia/hyfi-template' gh:entelecheia/hyperfast-python-template .

  init-hyperfast-python-project:
    desc: Create a new Python project using the hyperfast template
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - copier copy --UNSAFE gh:entelecheia/hyperfast-python-template .

  init-hyperfast-docker-project:
    desc: Create a new Docker project using the hyperfast template
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - copier copy --UNSAFE gh:entelecheia/hyperfast-docker-template .

  reinit-hyperfast-python-project:
    desc: Reinitialize a project using the hyperfast python template
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - args=(); while IFS= read -r file; do args+=("--skip" "$file"); done < .copierignore; copier copy "${args[@]}" --answers-file .copier-config.yaml --UNSAFE gh:entelecheia/hyperfast-python-template .

  reinit-hyperfast-docker-project:
    desc: Reinitialize a project using the hyperfast docker template
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - args=(); while IFS= read -r file; do args+=("--skip" "$file"); done < .copierignore; copier copy "${args[@]}" --answers-file .copier-config.yaml --UNSAFE gh:entelecheia/hyperfast-docker-template .

  reinit-hyperfast-project:
    desc: Reinitialize a project using the hyperfast template
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - args=(); while IFS= read -r file; do args+=("--skip" "$file"); done < .copierignore; copier copy "${args[@]}" --answers-file .copier-config.yaml --UNSAFE gh:entelecheia/hyperfast-template .

  reinit-hyfi-project:
    desc: Reinitialize a project using the hyfi template
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - args=(); while IFS= read -r file; do args+=("--skip" "$file"); done < .copierignore; copier copy "${args[@]}" --data 'code_template_source=gh:entelecheia/hyfi-template' --answers-file .copier-config.yaml --UNSAFE gh:entelecheia/hyperfast-python-template .

  semantic-release-version:
    desc: Print the current version using semantic-release
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - semantic-release print-version --current

  semantic-release-next-version:
    desc: Print the next version using semantic-release
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - semantic-release print-version --next

  semantic-release-changelog:
    desc: Print the changelog using semantic-release
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - semantic-release changelog --released

  semantic-release-next-change:
    desc: Print the next change using semantic-release
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - semantic-release changelog --unreleased

  semantic-release-noop:
    desc: Run semantic-release in noop mode (dry run)
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - semantic-release --noop -v DEBUG

  semantic-prerelease-noop:
    desc: Run semantic-release in noop mode (dry run) for a prerelease
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - semantic-release --noop --prerelease -v DEBUG

  git-show-branches:
    desc: Show branches in the current Git repository
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git show-branch --list

  git-show-tags:
    desc: Show tags in the current Git repository
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git tag --list

  git-show-remotes:
    desc: Show remotes in the current Git repository
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git remote --verbose

  git-show-refs:
    desc: Show refs in the current Git repository
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git show-ref

  git-checkout-branch:
    desc: Checkout a branch in the current Git repository
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git checkout {{"{{.CLI_ARGS}}"}}

  git-checkout-main:
    desc: Checkout the main branch in the current Git repository
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git checkout main

  git-checkout-branch-upstream:
    desc: Checkout a branch in the current Git repository
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git checkout -B {{"{{.CLI_ARGS}}"}}
      - git push --set-upstream origin {{"{{.CLI_ARGS}}"}}

  git-sync-fork-main:
    desc: Sync a fork with the main branch of the upstream repository
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git fetch upstream
      - git checkout main
      - git merge upstream/main
      - git push

  # ref: https://adamj.eu/tech/2023/02/13/git-skip-hooks/
  git-disable-hook:
    desc: Disable a Git hook (Skip “unskippable” hooks, e.g. lfs hooks)
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git config core.hooksPath /dev/null

  git-enable-hook:
    desc: Enable a Git hook (unset core.hooksPath)
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git config --unset core.hooksPath

  git-lfs-skip-smudge:
    desc: Set global Git LFS smudge filter to skip (for faster checkout or for CI)
    cmds:
      - git config --global filter.lfs.smudge "git-lfs smudge --skip -- %f"
      - git config --global filter.lfs.process "git-lfs filter-process --skip"

  git-lfs-smudge:
    desc: Set global Git LFS smudge filter to default (enable smudging)
    cmds:
      - git config --global filter.lfs.smudge "git-lfs smudge -- %f"
      - git config --global filter.lfs.process "git-lfs filter-process"

  git-clone-skip-smudge:
    desc: Clone a Git repository with LFS smudge filter set to skip
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - GIT_LFS_SKIP_SMUDGE=1 git clone {{"{{.CLI_ARGS}}"}}

  git-lfs-install:
    desc: Install Git LFS
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git lfs install

  git-lfs-track:
    desc: Track files with Git LFS
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git lfs track {{"{{.CLI_ARGS}}"}}

  git-lfs-track-preset:
    desc: Track files with Git LFS using a preset
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git lfs track "*.parquet"
      - git lfs track "*.pkl"
      - git lfs track "*.pth"
      - git lfs track "*.pt"
      - git lfs track "*.tar"
      - git lfs track "*.tar.gz"
      - git lfs track "*.tgz"
      - git lfs track "*.zip"
      - git lfs track "*.zst"
      - git lfs track "*.gz"
      - git lfs track "*.ogg"
      - git lfs track "*.mp3"
      - git lfs track "*.mp4"
      - git lfs track "*.wav"
      - git lfs track "*.avi"
      - git lfs track "*.mov"
      - git lfs track "*.mkv"
      - git lfs track "*.flac"
      - git lfs track "*.xlsx"
      - git lfs track "*.xls"
      - git lfs track "*.csv"
      - git lfs track "*.tsv"
      - git lfs track "*.pdf"
      - git lfs track "*.docx"
      - git lfs track "*.doc"
      - git lfs track "*.pptx"
      - git lfs track "*.ppt"
      - git lfs track "*.hwp"

  git-lfs-migrate:
    desc: Migrate files to Git LFS
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git lfs migrate import --everything --include={{"{{.CLI_ARGS}}"}}

{{- if .openai.enabled | not | not }}

  openai-list-models:
    desc: List OpenAI models
    cmds:
      - openai api models.list

  openai-chat:
    desc: Chat with an OpenAI model
    cmds:
      - openai api chat_completions.create -m gpt-3.5-turbo -g user {{"{{.CLI_ARGS}}"}}

  openai-completion:
    desc: Get a completion from an OpenAI model
    cmds:
      - openai api completions.create -m text-davinci-003 -p {{"{{.CLI_ARGS}}"}}

  openai-generate-image:
    desc: Generate an image with an OpenAI model
    cmds:
      - openai api image.create -p {{"{{.CLI_ARGS}}"}}

{{- end }}

{{- if .lfs_folderstore.enabled | not | not }}

  lfs-folderstore-init:
    desc: Initialize the LFS folderstore for the current Git repository
    dir: {{"'{{.USER_WORKING_DIR}}'"}}
    cmds:
      - git config --add lfs.customtransfer.lfs-folder.path "${HOME}/.local/bin/lfs-folderstore"
      - git config --add lfs.customtransfer.lfs-folder.args "{{ .lfs_folderstore.store_dir }}"
      - git config --add lfs.standalonetransferagent lfs-folder
      - git config lfs.url "https://localhost"

{{- end }}

{{- if eq .chezmoi.os "linux" }}

  restart-docker-daemon:
    desc: Restart the Docker daemon
    cmds:
      - restart-docker-daemon

  watch-nvidia-smi:
    desc: Watch nvidia-smi output every second (useful for monitoring GPU usage)
    cmds:
      - watch -n 1 nvidia-smi

  dns-status:
    desc: Check the status of the DNS resolver
    cmds:
      - resolvectl status | grep "DNS Server" -A2

  sysinfo-inxi:
    desc: Print system information using inxi
    cmds:
      - inxi -F

{{- end }}
