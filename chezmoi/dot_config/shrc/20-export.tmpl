#!/bin/bash
export LANG='en_US.UTF-8'
export LANGUAGE='en_US:en'
export LC_ALL='en_US.UTF-8'
export LC_CTYPE='en_US.UTF-8'
export LC_COLLATE='en_US.UTF-8'
export LC_MESSAGES='en_US.UTF-8'
export TERM=xterm-256color

# {{ if .system.is_wsl }}
# The boot.systemd in /etc/wsl.conf is only for Windows 11, so this workaround is needed
if service docker status 2>&1 | grep -q "is not running"; then
  wsl.exe -d "${WSL_DISTRO_NAME?}" -u root -e /usr/sbin/service docker start >/dev/null 2>&1
fi
# {{ end }}

if [ -d "${HOME}/.nvm" ]; then
  export NVM_DIR="$HOME/.nvm"
  # shellcheck disable=SC1091
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
  # shellcheck disable=SC1091
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
fi

if [ -r "${HOME}/.sdkman/bin/sdkman-init.sh" ]; then
  export SDKMAN_DIR="${HOME}/.sdkman"
  # shellcheck disable=SC1091
  . "${HOME}/.sdkman/bin/sdkman-init.sh"
fi

# if ${HOME}/.pyenv exists and pyenv is installed, then initialize pyenv
if [ -d "${HOME}/.pyenv" ] && command -v pyenv >/dev/null 2>&1; then
  export PYENV_ROOT="${HOME}/.pyenv"
  export PATH="${PYENV_ROOT}/bin:${PATH}"
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
  if which pyenv-virtualenv-init >/dev/null; then
    eval "$(pyenv virtualenv-init -)"
  fi
  export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi

if op --version &>/dev/null; then
  if [[ -n "$ZSH_VERSION" ]]; then
    eval "$(op completion zsh)"
    compdef _op op
  fi
fi

LD_PRELOAD="/usr/lib64/libtcmalloc.so.4"
if [[ -f "${LD_PRELOAD}" ]]; then
  export LD_PRELOAD
fi
