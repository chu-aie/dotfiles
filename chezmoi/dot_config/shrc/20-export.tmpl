#!/bin/bash
export TERM=xterm-256color
export AUTO_UPDATE_DOTFILES="{{ .system.auto_update }}"
export USER_FULLNAME="{{ .name }}"
export USER_EMAIL="{{ .email }}"
export APPLY_ROOTMOI="{{ .system.apply_rootmoi }}"
export GITHUB_USERNAME="{{ .github.username }}"
export DOCKER_USERNAME="{{ .docker.username }}"
export WORKSPACE_LOCATION="{{ .workspace.location }}"
export WORKSPACE_ROOT="{{ .workspace.root }}"
export GNUPGHOME="${HOME}/.gnupg"
# {{ if .gnupg.gitsign }}
GPG_TTY=$(tty)
export GPG_TTY
# {{ end }}

# {{ if .system.is_wsl }}
# The boot.systemd in /etc/wsl.conf is only for Windows 11, so this workaround is needed
if service docker status 2>&1 | grep -q "is not running"; then
  wsl.exe -d "${WSL_DISTRO_NAME?}" -u root -e /usr/sbin/service docker start >/dev/null 2>&1
fi
# {{ end }}

# {{ if eq .chezmoi.os "darwin" }}
if [ -d "/opt/homebrew/bin" ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi
# {{ else if eq .chezmoi.os "linux" }}
if [ -x /home/linuxbrew/.linuxbrew/bin/brew ]; then
  # shellcheck disable=SC2312
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
elif [ -x "${HOME}/.linuxbrew/bin/brew" ]; then
  # shellcheck disable=SC2312
  eval "$("${HOME}/.linuxbrew/bin/brew" shellenv)"
fi
# {{ end }}

if [ -r "${HOME}/.sdkman/bin/sdkman-init.sh" ]; then
  export SDKMAN_DIR="${HOME}/.sdkman"
  # shellcheck disable=SC1091
  . "${HOME}/.sdkman/bin/sdkman-init.sh"
fi

if [ -d "${HOME}/go/bin" ]; then
  export PATH="${HOME}/go/bin:${PATH}"
fi

if [ -d "${HOME}/bin" ]; then
  export PATH="${HOME}/bin:${PATH}"
fi

if [ -d "${HOME}/.local/bin" ]; then
  export PATH="${HOME}/.local/bin:${PATH}"
fi

export VISUAL="{{ .editor }}"
export EDITOR="{{ .editor }}"

# {{ if .system.is_wsl }}
export BROWSER="wslview"
# {{ end }}

# if ${HOME}/.pyenv exists and pyenv is installed, then initialize pyenv
if [ -d "${HOME}/.pyenv" ] && command -v pyenv >/dev/null 2>&1; then
  export PYENV_ROOT="${HOME}/.pyenv"
  export PATH="${PYENV_ROOT}/bin:${PATH}"
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
  if which pyenv-virtualenv-init >/dev/null; then
    eval "$(pyenv virtualenv-init -)"
  fi
  export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi

# auto-update dotfiles
if [ "${AUTO_UPDATE_DOTFILES}" = "true" ]; then
  if [ -x "${HOME}/.local/bin/dotu" ]; then
    "${HOME}/.local/bin/dotu" -f
  fi
fi
