#!/bin/bash

# This file is automatically sourced by bash, and it's also sourced in .zshrc
# in order to keep the same aliases on both shells. So keep in mind that any
# code here must be compatible with bash and zsh.

alias cz="chezmoi"
alias czdr="chezmoi apply --verbose --destination {{ .chezmoi.workingTree }}/tmp --dry-run"

alias dotp="dotfiles-push"
alias dotu="dotfiles-update"
alias dotb="dotfiles-backup"
alias dotr="dotfiles-restore"

alias p="pass"
alias pp="passage"
alias psz="pass-fuzzy"
alias psg="passage-fuzzy"
alias psi="pass-insert"
alias psr="pass-rm"
alias pssop="pass-sync-op"
alias pss="pass-show"
alias d2op="import-dotenv-to-op"

alias dotdrop="dotdrop --cfg={{ .dotdrop.config_file }} -p {{ .dotdrop.user_profile }}"
alias rootdrop="dotdrop --cfg={{ .dotdrop.root_config_file }} -p {{ .dotdrop.root_profile }}"

alias cdt="code tunnel --accept-server-license-terms"
alias cdtrn="code tunnel rename"
alias cdtsi="code tunnel service install"
alias cdtsu="code tunnel service uninstall"
alias cdtsl="code tunnel service log"

alias mkctl="microk8s kubectl"

alias cw="chown-workspace"
alias cdc="cd {{ .chezmoi.workingTree }}"
alias cdd="cdc"
alias cddd="cd {{ .dotdrop.config_dir }}"
alias cddk="cd {{ .docker.share_dir }}"

alias dkfs="dockerfiles-sync"
alias dkfl="dockerfiles-pull"
alias dkfc="dockerfiles-clone"
alias dkc="dk-compose"
alias dkcb="dk-compose build"
alias dkcu="dk-compose up"
alias dkcr="dk-compose run"
alias dkb="dk-build"
alias dkr="dk-run"
alias dkcl="dk-cleanup"

alias dki="docker image"
alias dkls="docker image ls"
alias dkl="dkls"
alias dkcls="docker container ls -a"
alias dkirm="docker image rm"
alias dkps="docker ps"
alias deit="docker exec -it"
alias dkx="deit"
alias dkex="deit"

dotenv-vault() {
  npx dotenv-vault "$@"
}
alias dotenv="dotenv-vault"
alias denv="dotenv-vault"

refreshenv() {
  local shell

  shell=$(ps -p $$ -ocomm=) &&
    exec "${shell}"
}

mcd() {
  local dir="$1"

  mkdir -p "${dir}" &&
    cd "${dir}"
}

cdp() {
  local repo="${1:-}"

  cd "${WORKSPACE_PROJECT_DIR}/${repo}"
}
cdr() {
  local repo="${1:-}"

  cd "${WORKSPACE_REFERENCE_DIR}/${repo}"
}

alias cdw="cd {{ .workspace.home }}"

gcdp() {
  local repo="${1:-}"
  local dir="${repo##*/}"
  dir="${dir%.git}"

  command git clone "${repo}" "${WORKSPACE_PROJECT_DIR}/${dir}" &&
    cd "${WORKSPACE_PROJECT_DIR}/${dir}"
}

gcdr() {
  local repo="${1:-}"
  local dir="${repo##*/}"
  dir="${dir%.git}"

  command git clone "${repo}" "${WORKSPACE_REFERENCE_DIR}/${dir}" &&
    cd "${WORKSPACE_REFERENCE_DIR}/${dir}"
}

# See: https://github.com/twpayne/chezmoi/issues/854#issuecomment-675160348
chezmoi-re-run-scripts() { (
  set -ex

  rm -f "${HOME}/.config/chezmoi/chezmoistate.boltdb"
  chezmoi init --apply
); }

# {{ if .system.is_wsl }}
gsudo() {
  local shell

  shell=$(ps -p $$ -ocomm=) &&
    gsudo.exe wsl -d "${WSL_DISTRO_NAME?}" -e "${shell}" "-c" "$*"
}

alias cdwin="cd {{ .workspace.win_home }}"
# {{ end }}

alias socrypt-inplace="socrypt --inplace"
alias senc="socrypt"
alias senci="socrypt-inplace"
alias sdec="sops --decrypt"
