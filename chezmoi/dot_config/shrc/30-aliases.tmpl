#!/bin/bash

# This file is automatically sourced by bash, and it's also sourced in .zshrc
# in order to keep the same aliases on both shells. So keep in mind that any
# code here must be compatible with bash and zsh.

alias czm="chezmoi"
alias czmi="chezmoi init"
alias czma="chezmoi apply"
alias czmdr="chezmoi apply --verbose --destination {{ .chezmoi.workingTree }}/tmp --dry-run"

alias dotp="dotfiles-push"
alias dotu="dotfiles-update"
alias dotut="dotfiles-update-tools"
alias dotb="dotfiles-backup"
alias dotr="dotfiles-restore"

alias p="pass"
alias pp="passage"
alias psz="pass-fuzzy"
alias psg="passage-fuzzy"
alias psi="pass-insert"
alias psr="pass-rm"
alias pssop="pass-sync-op"
alias pss="pass-show"
alias d2op="import-dotenv-to-op"

alias dotdrop="dotdrop --cfg={{ .dotdrop.config_file }} -p {{ .dotdrop.user_profile }}"
alias rootdrop="dotdrop --cfg={{ .dotdrop.root_config_file }} -p {{ .dotdrop.root_profile }}"

alias cdt="code tunnel --accept-server-license-terms"
alias cdtrn="code tunnel rename"
alias cdtsi="code tunnel service install"
alias cdtsu="code tunnel service uninstall"
alias cdtsl="code tunnel service log"

alias mkctl="microk8s kubectl"

alias cw="chown-workspace"
alias cdc="cd {{ .chezmoi.workingTree }}"
alias cdd="cdc"
alias cddd="cd {{ .dotdrop.config_dir }}"
alias cddk="cd {{ .docker.share_dir }}"

alias dkfs="dockerfiles-sync"
alias dkfl="dockerfiles-pull"
alias dkfc="dockerfiles-clone"
alias dkc="dk-compose"
alias dkcb="dk-compose build"
alias dkcu="dk-compose up"
alias dkcr="dk-compose run"
alias dkcc="dk-compose config"
alias dkb="dk-build"
alias dkr="dk-run"
alias dkcl="dk-cleanup"

alias dki="docker image"
alias dkls="docker image ls"
alias dkl="dkls"
alias dkcls="docker container ls -a"
alias dkirm="docker image rm"
alias dkps="docker ps"
alias deit="docker exec -it"
alias dkx="deit"
alias dkex="deit"

dotenv-vault() {
  npx dotenv-vault "$@"
}
alias dotenv="dotenv-vault"
alias denv="dotenv-vault"

refreshenv() {
  local shell

  shell=$(ps -p $$ -ocomm=) &&
    exec "${shell}"
}

mcd() {
  local dir="$1"

  mkdir -p "${dir}" &&
    cd "${dir}"
}

cdp() {
  local repo="${1:-}"

  cd "${WORKSPACE_PROJECT_DIR}/${repo}"
}
cdr() {
  local repo="${1:-}"

  cd "${WORKSPACE_REFERENCE_DIR}/${repo}"
}

alias cdw="cd {{ .workspace.home }}"

gcdp() {
  local repo="${1:-}"
  local dir="${repo##*/}"
  dir="${dir%.git}"

  command git clone "${repo}" "${WORKSPACE_PROJECT_DIR}/${dir}" &&
    cd "${WORKSPACE_PROJECT_DIR}/${dir}"
}

gcdr() {
  local repo="${1:-}"
  local dir="${repo##*/}"
  dir="${dir%.git}"

  command git clone "${repo}" "${WORKSPACE_REFERENCE_DIR}/${dir}" &&
    cd "${WORKSPACE_REFERENCE_DIR}/${dir}"
}

# See: https://github.com/twpayne/chezmoi/issues/854#issuecomment-675160348
chezmoi-re-run-scripts() { (
  set -ex

  rm -f "${HOME}/.config/chezmoi/chezmoistate.boltdb"
  chezmoi init --apply
); }

# {{ if .system.is_wsl }}
gsudo() {
  local shell

  shell=$(ps -p $$ -ocomm=) &&
    gsudo.exe wsl -d "${WSL_DISTRO_NAME?}" -e "${shell}" "-c" "$*"
}

alias cdwin="cd {{ .system.winhome }}"
# {{ end }}

alias socrypt-inplace="socrypt --inplace"
alias senc="socrypt"
alias sencu="socrypt --updatekeys"
alias senci="socrypt-inplace"
alias sdecf="socrypt --decrypt"
alias sdec="sops --decrypt"

# commitizen
alias czc="cz commit"

# Task (taskfile)
alias gtask="task -g"
alias t="task"
alias tls="task --list"
alias tla="task --list-all"
alias gt="gtask"
alias gtls="gtask --list"
alias gtla="gtask --list-all"

# Python Virtual Environment
function workon {
  if [ -z "$1" ]; then
    echo "Usage: workon <virtualenv>"
    return
  fi
  if [ -d "$WORKON_HOME/$1" ]; then
    source "$WORKON_HOME/$1/bin/activate"
  else
    echo "No such virtualenv: $1"
  fi
}
function mkvirtualenv {
  local usage="Usage: mkvirtualenv <virtualenv> [--system-site-packages|-s][--force|-f][--help|-h]"
  local use_system_site_packages=0
  local venv_name=""
  local force=0

  for arg in "$@"; do
    case $arg in
      --system-site-packages|-s)
        use_system_site_packages=1
        ;;
      --force|-f)
        force=1
        ;;
      --help|-h)
        echo "$usage"
        return
        ;;
      *)
        if [ -z "$venv_name" ]; then
          venv_name=$arg
        else
          echo "Unknown argument: $arg"
          echo "$usage"
          return
        fi
        ;;
    esac
  done

  if [ -z "$venv_name" ]; then
    echo "Virtualenv name not provided"
    echo "$usage"
    return
  fi

  if [ ! -d "$WORKON_HOME/$venv_name" ] || [ $force -eq 1 ]; then
    if [ $use_system_site_packages -eq 1 ]; then
      python3 -m venv "$WORKON_HOME/$venv_name" --system-site-packages
      source "$WORKON_HOME/$venv_name/bin/activate"
    else
      python3 -m venv "$WORKON_HOME/$venv_name"
      source "$WORKON_HOME/$venv_name/bin/activate"
      pip install --upgrade pip setuptools wheel
    fi
  else
    echo "Already exists: $venv_name"
  fi
}
function rmvirtualenv {
  if [ -z "$1" ]; then
    echo "Usage: rmvirtualenv <virtualenv>"
    return
  fi
  if [ -d "$WORKON_HOME/$1" ]; then
    rm -rf "$WORKON_HOME/$1"
  else
    echo "No such virtualenv: $1"
  fi
}
alias mkvenv="mkvirtualenv"
alias mkvirtualenv-system="mkvirtualenv --system-site-packages"
alias mkvenvs="mkvirtualenv-system"
alias rmvenv="rmvirtualenv"

# {{- if .lfs_folderstore.enabled | not | not -}} # lfs-folderstore
function git-config-lfs-folderstore() {
  # refer: https://github.com/OpeningDesign/LFS-template
  git config --add lfs.customtransfer.lfs-folder.path "${HOME}/.local/bin/lfs-folderstore"
  git config --add lfs.customtransfer.lfs-folder.args "{{ .lfs_folderstore.store_dir }}"
  git config --add lfs.standalonetransferagent lfs-folder
  git config lfs.url "https://localhost"
}
alias lfs-folderstore-init="git-config-lfs-folderstore"
# {{- end }}
alias cdvenvs="cd ${WORKON_HOME}"
alias cdv="cdvenvs"
