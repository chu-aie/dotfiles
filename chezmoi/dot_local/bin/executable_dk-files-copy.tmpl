#!/bin/bash

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../../.chezmoitemplates/scripts-library

# arguments usage
USAGE="DOCKER_NAME [--project-directory PROJECT_DIR] [--dockerfiles-directory DOCKERFILES_DIR] [-h|--help]"

# declare arguments
PROJECT_DIR=""
DOCKERFILES_DIR=""
ADDITIONAL_ARGS=""

set +u
# read arguments
# check first argument starts with a dash
# if it does, it's an option and DOCKER_NAME can be the last argument
# if not, it's the DOCKER_NAME
# if no arguments, use default arguments
if [[ $# -eq 0 ]]; then
  DOCKER_NAME=""
else
  if [[ "$1" != -* ]]; then
    DOCKER_NAME="$1"
    shift
  fi
fi
# parse options
while [[ $# -gt 0 ]]; do
  case "$1" in
  --project-directory)
    PROJECT_DIR="$2"
    shift
    ;;
  --project-directory=*)
    PROJECT_DIR="${1#*=}"
    ;;
  --dockerfiles-directory)
    DOCKERFILES_DIR="$2"
    shift
    ;;
  --dockerfiles-directory=*)
    DOCKERFILES_DIR="${1#*=}"
    ;;
  -h | --help)
    echo "Usage: $0 $USAGE" >&2    
    exit 0
    ;;
  -h*)
    echo "Usage: $0 $USAGE" >&2
    exit 0
    ;;
  *)
    # if no option matches
    # if it does not start with dash and DOCKER_NAME is empty, it's the DOCKER_NAME
    # if it does start with dash, it's an additional argument
    if [[ "$1" != -* ]] && [[ -z "$DOCKER_NAME" ]]; then
      DOCKER_NAME="$1"
    else
      ADDITIONAL_ARGS="$ADDITIONAL_ARGS $1"
    fi
    ;;
  esac
  shift
done
# check if remaining arguments exist
if [[ -n "$ADDITIONAL_ARGS" ]]; then
  echo "Additional arguments: $ADDITIONAL_ARGS" >&2
fi
set -u

# define function to copy dockerfiles from source to destination
function copy_dockerfiles() {
  local source_dir="$1"
  local destination_dir="$2"

  if [[ ! -d "$source_dir" ]]; then
    log_error "Source directory does not exist: $source_dir"
    # skip copying dockerfiles
    return
  fi
  if [[ ! -d "$destination_dir" ]]; then
    log_error "Destination directory does not exist: $destination_dir"
    # skip copying dockerfiles
    return
  fi
  if [[ -d "$source_dir" ]] && [[ -d "$destination_dir" ]]; then
    dockerfiles_dir="${source_dir}/.docker"
    if [[ -d "$dockerfiles_dir" ]]; then
      log_task "Copying dockerfiles from: $dockerfiles_dir to: $destination_dir"
      c cp -rf "$dockerfiles_dir" "$destination_dir"
    fi
  fi
}

log_task "Copying dockerfiles"

PROJECT_DIR="${WORKSPACE_ROOT}/projects"
DOCKERFILE_DIR="${HOME}/.local/share/dockerfiles"

# if both PROJECT_DIR and DOCKERFILES_DIR are provided, copy dockerfiles
if [[ -n "$PROJECT_DIR" ]] && [[ -n "$DOCKERFILES_DIR" ]]; then
  copy_dockerfiles "$PROJECT_DIR" "$DOCKERFILES_DIR"
else
  # if DOCKER_NAME is provided, copy dockerfiles from project directory
  if [[ -n "$DOCKER_NAME" ]]; then
    copy_dockerfiles "${PROJECT_DIR}/${DOCKER_NAME}" "${DOCKERFILE_DIR}/${DOCKER_NAME}"
  else
    # if DOCKER_NAME is not provided, copy dockerfiles from all project directories
    for docker_dir in "${DOCKERFILE_DIR}"/*; do
      if [[ -d "$docker_dir" ]]; then
        DOCKER_NAME=$(basename "$docker_dir")
        copy_dockerfiles "${PROJECT_DIR}/${DOCKER_NAME}" "${DOCKERFILE_DIR}/${DOCKER_NAME}"
      fi
    done
  fi  
fi
