#!/bin/bash

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../../.chezmoitemplates/scripts-library

# arguments usage
USAGE="DOCKER_NAME [-r|--release-type RELEASE_TYPE] [-v|--version VERSION] [-l|--latest] [-b|--build-path BUILD_PATH] [-u|--username USERNAME] [-d|--dockerfile-path DOCKERFILE_PATH] [-p|--push ] [-h|--help]"

# declare arguments
DOCKER_NAME=""
RELEASE_TYPE="runtime"
VERSION=""
LATEST="false"
BUILD_PATH=""
USERNAME="{{ .docker.username }}"
DOCKERFILE_PATH=""
PUSH="false"

set +u
# read arguments
# check first argument starts with a dash
# if it does, it's an option and DOCKER_NAME can be the last argument
# if not, it's the DOCKER_NAME
if [[ "$1" != -* ]]; then
  # if no arguments, print usage
  if [[ $# -eq 0 ]]; then
    echo "Usage: $0 $USAGE" >&2    
    exit 1
  fi
  DOCKER_NAME="$1"
  shift
fi
# parse options
while [[ $# -gt 0 ]]; do
  case "$1" in
  -r | --release-type)
    RELEASE_TYPE="$2"
    shift
    ;;
  --release-type=*)
    RELEASE_TYPE="${1#*=}"
    ;;
  -v | --version)
    VERSION="$2"
    shift
    ;;
  --version=*)
    VERSION="${1#*=}"
    ;;
  -l | --latest)
    LATEST="true"
    ;;
  -b | --build-path)
    BUILD_PATH="$2"
    shift
    ;;
  --build-path=*)
    BUILD_PATH="${1#*=}"
    ;;
  -u | --username)
    USERNAME="$2"
    shift
    ;;
  --username=*)
    USERNAME="${1#*=}"
    ;;
  -d | --dockerfile-path)
    DOCKERFILE_PATH="$2"
    shift
    ;;
  --dockerfile-path=*)
    DOCKERFILE_PATH="${1#*=}"
    ;;
  -p | --push)
    PUSH="true"
    ;;
  -h | --help)
    echo "Usage: $0 $USAGE" >&2    
    exit 0
    ;;
  -h*)
    echo "Usage: $0 $USAGE" >&2
    exit 0
    ;;
  *)
    # if no option matches, it's the DOCKER_NAME
    if [[ -z "$DOCKER_NAME" ]]; then
      DOCKER_NAME="$1"
    else
      echo "Usage: $0 $USAGE" >&2
      exit 1
    fi
    ;;
  esac
  shift
done
set -u

# local variables
DOCKERFILES_REPO_DIR="${HOME}/.local/share/dockerfiles"
if [[ -z "$BUILD_PATH" ]]; then
  BUILD_PATH="${WORKSPACE_ROOT}/projects/${DOCKER_NAME}"
fi
if [[ -z "$DOCKERFILE_PATH" ]]; then
  DOCKERFILE_PATH="${DOCKERFILES_REPO_DIR}/${DOCKER_NAME}/Dockerfile.${RELEASE_TYPE}"
fi

if [[ "$LATEST" == "true" ]] && [[ -z "$VERSION" ]]; then
  VERSION="latest"
fi
TAG="${VERSION}-${RELEASE_TYPE}"
DOCKER_REPO="${USERNAME}/${DOCKER_NAME}:${TAG}"
TARGET=""
if [[ "$VERSION" == "latest" ]]; then
  TARGET="image-latest"
elif [[ "$VERSION" == "pre*" ]] || [[ "$VERSION" == "night*" ]]; then
  TARGET="image-nightly"
elif [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
  TARGET="image-versioned"
else
  echo "ERROR: unknown version: $VERSION"
fi

if docker --version &>/dev/null; then
  log_task "Building ${DOCKER_REPO} for context ${BUILD_PATH}"
  DOCKER_CMD="docker build --rm --force-rm "
  if [[ -n "$TARGET" ]]; then
    DOCKER_CMD="${DOCKER_CMD}--target ${TARGET} "
  fi
  if [[ -n "$VERSION" ]]; then
    DOCKER_CMD="${DOCKER_CMD}--build-arg VERSION=${VERSION} "
  fi
  DOCKER_CMD="${DOCKER_CMD}-t ${DOCKER_REPO} "
  DOCKER_CMD="${DOCKER_CMD}-f ${DOCKERFILE_PATH} "
  DOCKER_CMD="${DOCKER_CMD}${BUILD_PATH}"
  c eval "$DOCKER_CMD"

  log_info "Successfully built ${DOCKER_REPO} with context ${BUILD_PATH}"

  if [[ "$PUSH" == "true" ]]; then
    log_task "Pushing ${DOCKER_REPO}"
    c docker push "${DOCKER_REPO}"
  fi
  # exclude VERSION=latest|prerelease|nightly from latest tag
  if [[ "$LATEST" == "true" ]] && [[ "$VERSION" != "latest*" ]] && [[ "$VERSION" != "pre*" ]] && [[ "$VERSION" != "night*" ]]; then
    log_task "Tagging ${DOCKER_REPO} as latest"
    LATEST_TAG="latest-${RELEASE_TYPE}"
    c docker tag "${DOCKER_REPO}" "${USERNAME}/${DOCKER_NAME}:${LATEST_TAG}"

    if [[ "$PUSH" == "true" ]]; then
      log_task "Pushing ${USERNAME}/${DOCKER_NAME}:${LATEST_TAG}"
      c docker push "${USERNAME}/${DOCKER_NAME}:${LATEST_TAG}"
    fi
  fi

fi
