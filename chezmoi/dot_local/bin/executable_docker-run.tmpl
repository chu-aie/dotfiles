#!/bin/bash

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../../.chezmoitemplates/scripts-library

# arguments usage
USAGE="DOCKER_NAME [-c:--cmd CMD] [-r|--release-type RELEASE_TYPE] [--variant VARIANT] --run-args RUN_ARGS] [-v|--version VERSION] [-l|--latest] [-u|--username USERNAME] [-b|--build-path BUILD_PATH] [-d|--dockerfile-path DOCKERFILE_PATH] [-h|--help]"

# declare arguments
DOCKER_NAME=""
RELEASE_TYPE="runtime"
VARIANT=""
VERSION="latest"
LATEST="false"
USERNAME="{{ .docker.username }}"
BUILD_PATH=""
DOCKERFILE_PATH=""
ADDITIONAL_ARGS=""
CMD="/bin/bash"
RUN_ARGS=""

set +u
# read arguments
# check first argument starts with a dash
# if it does, it's an option and DOCKER_NAME can be the last argument
# if not, it's the DOCKER_NAME
if [[ "$1" != -* ]]; then
  # if no arguments, print usage
  if [[ $# -eq 0 ]]; then
    echo "Usage: $0 $USAGE" >&2    
    exit 1
  fi
  DOCKER_NAME="$1"
  shift
fi
# parse options
while [[ $# -gt 0 ]]; do
  case "$1" in
  -c | --cmd)
    CMD="$2"
    shift
    ;;
  --cmd=*)
    CMD="${1#*=}"
    ;;
  -r | --release-type)
    RELEASE_TYPE="$2"
    shift
    ;;
  --release-type=*)
    RELEASE_TYPE="${1#*=}"
    ;;
  -v | --version)
    VERSION="$2"
    shift
    ;;
  --version=*)
    VERSION="${1#*=}"
    ;;
  --variant)
    VARIANT="$2"
    shift
    ;;
  --variant=*)
    VARIANT="${1#*=}"
    ;;
  --run-args)
    RUN_ARGS="$2"
    shift
    ;;
  --run-args=*)
    RUN_ARGS="${1#*=}"
    ;;
  -l | --latest)
    LATEST="true"
    ;;
  -u | --username)
    USERNAME="$2"
    shift
    ;;
  --username=*)
    USERNAME="${1#*=}"
    ;;
  -d | --dockerfile-path)
    DOCKERFILE_PATH="$2"
    shift
    ;;
  -b | --build-path)
    BUILD_PATH="$2"
    shift
    ;;
  --build-path=*)
    BUILD_PATH="${1#*=}"
    ;;
  --dockerfile-path=*)
    DOCKERFILE_PATH="${1#*=}"
    ;;
  -h | --help)
    echo "Usage: $0 $USAGE" >&2    
    exit 0
    ;;
  -h*)
    echo "Usage: $0 $USAGE" >&2
    exit 0
    ;;
  *)
    # if no option matches, it's the DOCKER_NAME
    if [[ -z "$DOCKER_NAME" ]]; then
      DOCKER_NAME="$1"
    else
      ADDITIONAL_ARGS="$ADDITIONAL_ARGS $1"
    fi
    ;;
  esac
  shift
done
# check if remaining arguments exist
if [[ -n "$ADDITIONAL_ARGS" ]]; then
  echo "Additional arguments: $ADDITIONAL_ARGS" >&2
fi
set -u

# check version format
if [[ "$LATEST" == "true" ]] && [[ -z "$VERSION" ]]; then
  VERSION="latest"
elif [[ "$VERSION" == "pre*" ]] || [[ "$VERSION" == "night*" ]]; then
  VERSION="nightly"
fi

# check PATHs
if [[ -z "$BUILD_PATH" ]]; then
  BUILD_PATH="${WORKSPACE_ROOT}/projects/${DOCKER_NAME}"
fi
if [[ -z "$DOCKERFILE_PATH" ]]; then
  DOCKERFILE_PATH="${BUILD_PATH}/Dockerfile.${RELEASE_TYPE}"
fi
if [[ -z "$DOCKERFILE_PATH" ]]; then
  DOCKERFILES_REPO_DIR="${HOME}/.local/share/dockerfiles"
  DOCKERFILE_PATH="${DOCKERFILES_REPO_DIR}/${DOCKER_NAME}"
fi
DOCKERFILE_DIR="$DOCKERFILE_PATH"

# load environment variables
DOCKER_ENV_PATH="${DOCKERFILE_DIR}/.env.docker"
if [[ -f "$DOCKER_ENV_PATH" ]]; then
  log_task "Sourcing environment variables from ${DOCKER_ENV_PATH}"
  set -a
  # shellcheck disable=SC1090
  source "$DOCKER_ENV_PATH"
  set +a
fi

# check DOCKER_SCRIPT
DOCKER_SCRIPT=".docker.run"
DOCKER_SCRIPT_PATH="${DOCKERFILE_DIR}/${DOCKER_SCRIPT}"
if [[ -f "$DOCKER_SCRIPT_PATH" ]]; then
  log_task "Sourcing environment script from ${DOCKER_SCRIPT_PATH}"
  set -a
  # shellcheck disable=SC1090
  source "$DOCKER_SCRIPT_PATH"
  set +a
fi

ENV_FILE=".env.${RELEASE_TYPE}"
ENV_PATH="${DOCKERFILE_DIR}/${ENV_FILE}"

if [[ -n "$VARIANT" ]]; then
  TAG="${VERSION}-${VARIANT}-${RELEASE_TYPE}"
else
  TAG="${VERSION}-${RELEASE_TYPE}"
fi
DOCKER_IMAGE_NAME="${USERNAME}/${DOCKER_NAME}:${TAG}"
DOCKER_CONTAINTER_NAME="${DOCKER_NAME}-${RELEASE_TYPE}"

if docker --version &>/dev/null; then
  log_task "Running docker container ${DOCKER_CONTAINTER_NAME} from image ${DOCKER_IMAGE_NAME}"
  DOCKER_CMD="docker run --rm "
  if [[ -n "$ADDITIONAL_ARGS" ]]; then
    DOCKER_CMD="${DOCKER_CMD}${ADDITIONAL_ARGS} "
  fi
  if [[ -f "$ENV_PATH" ]]; then
    DOCKER_CMD="${DOCKER_CMD}--env-file ${ENV_PATH} "
  fi
  if [[ -n "$RUN_ARGS" ]]; then
    DOCKER_CMD="${DOCKER_CMD}${RUN_ARGS} "
  fi
  DOCKER_CMD="${DOCKER_CMD}--name ${DOCKER_CONTAINTER_NAME} "
  DOCKER_CMD="${DOCKER_CMD}${DOCKER_IMAGE_NAME} ${CMD}"
  c eval "$DOCKER_CMD"

fi
