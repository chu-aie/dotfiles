#!/bin/bash
# {{- template "scripts-library" }}
# {{- template "package-library" }}
log_task "Installing packages by scripts"
# TODO: install minimal packages in devcontainer
# shellcheck source=/dev/null
source "${HOME}/.config/shrc/00-dotfiles-export"
# check if --update or -u flag is set
set +u
if [[ "${1}" == "--update" ]] || [[ "${1}" == "-u" ]]; then
  UPDATE=true
else
  UPDATE=false
fi
set -u

DOTFILES_PKGS_SCRIPT=${DOTFILES_PKGS_SCRIPT:-()}
DOTFILES_PKGS_TO_INSTALL=${DOTFILES_PKGS_TO_INSTALL:-()}

wanted_packages=()
for package in "${DOTFILES_PKGS_SCRIPT[@]}"; do
  if is_item_in_array "${package}" "${DOTFILES_PKGS_TO_INSTALL[@]}"; then
    wanted_packages+=("${package}")
  fi
done
log_info "Wanted packages: ${wanted_packages[*]}"

# TODO: need to check OS and install packages accordingly
# TODO: separate script_cmd into OS-specific scripts
{{- range .packages }}
{{- if and (hasKey . "script") ( .script ) (hasKey . "script_cmd") ( .script_cmd ) }}
# installing {{ .name }}
PKG_NAME="{{ .name }}"
if is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  {{- if and (hasKey . "script_prereqs") ( .script_prereqs ) }}
  c {{ .script_prereqs }}
  {{- end }}
  if {{ if and (hasKey . "check_prereqs") ( .check_prereqs ) }}{{ .check_prereqs }}{{ else }}true{{ end }}; then
    if {{ if and (hasKey . "check_installed") ( .check_installed ) }}{{ .check_installed }}{{ else }}command -v "${PKG_NAME}" &>/dev/null{{ end }}; then
      if [[ "${UPDATE}" == "true" ]] || ( [[ "${DOTFILES_UPGRADE_PACKAGES}" == "true" ]] && is_item_in_array "${PKG_NAME}" "${DOTFILES_PKGS_UPGRADABLE[@]}" ); then
        if is_package_installed_by_package_managers "${PKG_NAME}"; then
          log_info "Package ${PKG_NAME} is installed by other means"
        else
          # Get current and latest version numbers
          current_version="{{ if hasKey . "current_version" }}{{ .current_version }}{{ end }}"
          latest_version="{{ if hasKey . "latest_version" }}{{ .latest_version }}{{ end }}"

          # Compare versions and update if necessary
          if [[ "$current_version" != "$latest_version" ]]; then
            log_task "Upgrading ${PKG_NAME} from ${current_version} to ${latest_version}"
            c {{ .script_cmd }}
          else
            log_task "${PKG_NAME} is already up-to-date (${current_version})"
          fi
        fi
      else
        log_info "Package ${PKG_NAME} is already installed"
      fi
    else
      log_task "Installing ${PKG_NAME}"
      c {{ .script_cmd }}
    fi
{{- if and (hasKey . "completion_file") ( .completion_file ) }}
    # Install completion file
    completion_file="{{ .completion_file }}"
    completion_file_dir="$(dirname "${completion_file}")"
    completion_url="{{ if and (hasKey . "completion_url") ( .completion_url ) }}{{ .completion_url }}{{ end }}"
    completion_cmd="{{ if and (hasKey . "completion_cmd") ( .completion_cmd ) }}{{ .completion_cmd }}{{ end }}"
    if [[ ! -f "${completion_file}" ]]; then
      log_task "Installing ${PKG_NAME} completion file"
      if [[ ! -d "${completion_file_dir}" ]]; then
        c mkdir -p "${completion_file_dir}"
      fi
      if [[ -n "${completion_cmd}" ]]; then
        c "${completion_cmd}" > "${completion_file}"
      elif [[ -n "${completion_url}" ]]; then
        c wget -O "${completion_file}" "${completion_url}"
      else
        log_error "No completion file or URL specified for ${PKG_NAME}"
      fi
    fi
{{- end }}
  else
    log_error "Prerequisites for ${PKG_NAME} not met"
  fi
fi
{{- end }}
{{- end }}

log_green "âœ…  Packages installed by scripts successfully. âœ¨ ðŸŒŸ âœ¨"
