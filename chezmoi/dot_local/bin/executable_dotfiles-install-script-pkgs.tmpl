#!/bin/bash
# {{- template "scripts-library" }}
log_task "Installing packages by scripts"

# shellcheck source=/dev/null
source "${HOME}/.config/shrc/00-dotfiles-export"
# check if --update or -u flag is set
set +u
if [[ "${1}" == "--update" ]] || [[ "${1}" == "-u" ]]; then
  UPDATE=true
else
  UPDATE=${DOTFILES_UPGRADE_PACKAGES:-false}
fi
set -u

DOTFILES_PKGS_SCRIPT=${DOTFILES_PKGS_SCRIPT:-()}
DOTFILES_PKGS_TO_INSTALL=${DOTFILES_PKGS_TO_INSTALL:-()}

wanted_packages=()
for package in "${DOTFILES_PKGS_SCRIPT[@]}"; do
  if is_item_in_array "${package}" "${DOTFILES_PKGS_TO_INSTALL[@]}"; then
    wanted_packages+=("${package}")
  fi
done
log_info "Wanted packages: ${wanted_packages[*]}"

function is_pkg_installed_by_pkg_managers() {
  local package="$1"
  if command -v brew &>/dev/null; then
    local BREW_PACKAGES=$(brew list)
    local BREW_CASK_PACKAGES=$(brew list --cask)
  else
    local BREW_PACKAGES=""
    local BREW_CASK_PACKAGES=""
  fi
  if command -v apt &>/dev/null; then
    local APT_PACKAGES=$(apt-get list --installed)
  else
    local APT_PACKAGES=""
  fi
  if command -v snap &>/dev/null; then
    local SNAP_PACKAGES=$(snap list)
  else
    local SNAP_PACKAGES=""
  fi

  if grep -q "^${package}$" <<< "${BREW_PACKAGES}"; then
    return 0
  elif grep -q "^${package}$" <<< "${BREW_CASK_PACKAGES}"; then
    return 0
  elif grep -q "^${package}/" <<< "${APT_PACKAGES}"; then
    return 0
  elif grep -q "^${package} " <<< "${SNAP_PACKAGES}"; then
    return 0
  else
    return 1
  fi

}

{{- range .packages }}
{{- if and (hasKey . "script_cmd") ( .script_cmd ) }}
# installing {{ .name }}
PKG_NAME="{{ .name }}"
if is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  if {{ if and (hasKey . "check_prereqs") ( .check_prereqs ) }}{{ .check_prereqs }}{{ else }}true{{ end }}; then
    if [[ "${UPDATE}" == "true" ]]; then
      if is_pkg_installed_by_pkg_managers "${PKG_NAME}"; then
        log_info "Package ${PKG_NAME} is already installed by package manager"
      else
        # Get current and latest version numbers
        current_version="{{ if hasKey . "current_version" }}{{ .current_version }}{{ end }}"
        latest_version="{{ if hasKey . "latest_version" }}{{ .latest_version }}{{ end }}"

        # Compare versions and update if necessary
        if [[ "$current_version" != "$latest_version" ]]; then
          log_task "Upgrading ${PKG_NAME} from ${current_version} to ${latest_version}"
          c {{ .script_cmd }}
        else
          log_task "${PKG_NAME} is already up-to-date (${current_version})"
        fi
      fi
    elif {{ if and (hasKey . "check_installed") ( .check_installed ) }}{{ .check_installed }}{{ else }}command -v "${PKG_NAME}" &>/dev/null{{ end }}; then
      log_info "Package ${PKG_NAME} is already installed"
    else
      log_task "Installing ${PKG_NAME}"
      c {{ .script_cmd }}
    fi
{{- if and (hasKey . "completion_file") ( .completion_file ) }}
    # Install completion file
    completion_file="{{ .completion_file }}"
    completion_file_dir="$(dirname "${completion_file}")"
    completion_url="{{ .completion_url }}"
    if [[ ! -f "${completion_file}" ]]; then
      log_task "Installing ${PKG_NAME} completion file"
      if [[ ! -d "${completion_file_dir}" ]]; then
        c mkdir -p "${completion_file_dir}"
      fi
      c wget -O "${completion_file}" "${completion_url}"
    fi
{{- end }}
  else
    log_error "Prerequisites for ${PKG_NAME} not met"
  fi
fi
{{- end }}
{{- end }}

log_green "âœ…  Packages installed by scripts successfully. âœ¨ ðŸŒŸ âœ¨"
