#!/bin/bash
# {{ template "scripts-library" }}

# Clone or update the dotdrop repository (github auth is required for private repositories)
DOTDROP_REPO="{{- .dotdrop.repo }}"
DOTDROP_LOCAL_REPO="{{- .chezmoi.workingTree }}/dotdrop"
DOTDROP_CONFIGDIR="{{- .dotdrop.config_dir }}"
if [ ! -d "$DOTDROP_CONFIGDIR" ]; then
  # if DOTDROP_REPO does not start with "https://" or "git@" then it is a local repository
  if [[ "$DOTDROP_REPO" != "https://"* ]] && [[ "$DOTDROP_REPO" != "git@"* ]]; then
    # Copy the local dotdrop repository to ~/.config/dotdrop
    log_task "Copy dotdrop repository"
    c cp -r "$DOTDROP_LOCAL_REPO" "$DOTDROP_CONFIGDIR"
  else
    log_task "Clone dotdrop repository"
    c git clone "$DOTDROP_REPO" "$DOTDROP_CONFIGDIR"
  fi
else
  if [[ "$DOTDROP_REPO" != "https://"* ]] && [[ "$DOTDROP_REPO" != "git@"* ]]; then
    log_info "dotdrop repository already exists"
  else
    # if existing dotdrop repository is not a git repository then remove it
    if ! git -C "$DOTDROP_CONFIGDIR" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      log_task "Remove dotdrop repository"
      c rm -rf "$DOTDROP_CONFIGDIR"
      log_task "Clone dotdrop repository"
      c git clone "$DOTDROP_REPO" "$DOTDROP_CONFIGDIR"
    # otherwise update the dotdrop repository
    else
      log_task "Update dotdrop repository"
      c git -C "$DOTDROP_CONFIGDIR" pull
    fi
  fi
fi

if dotdrop --version &>/dev/null; then
    log_task "Updating dotfiles for dotdrop"
    export DOTDROP_PROFILE="{{ .dotdrop.user_profile }}"
    export DOTDROP_CONFIG="{{ .dotdrop.config_file }}"
    dotdrop --cfg="${DOTDROP_CONFIG}" -p "${DOTDROP_PROFILE}" install
fi
