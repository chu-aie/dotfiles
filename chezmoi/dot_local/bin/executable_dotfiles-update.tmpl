#!/bin/bash
# {{ template "scripts-library" }}

# check if --prerelease or -p flag is set
set +u
if [[ "${1}" == "--prerelease" ]] || [[ "${1}" == "-p" ]]; then
  PRERELEASE=true
else
  PRERELEASE=false
fi
set -u

if command -v gh >/dev/null; then
  if gh auth status &>/dev/null; then
    # setup git authentication
    gh auth setup-git
  fi
fi

if chezmoi --version &>/dev/null; then
  CHEZMOI_REPO="{{ .chezmoi.workingTree }}"
  # Get the remote URL of the local repository
  REPO_URL=$(git --git-dir="$CHEZMOI_REPO/.git" --work-tree="$CHEZMOI_REPO" remote get-url origin)

  # Fetch the latest tags from the remote
  git --git-dir="$CHEZMOI_REPO/.git" --work-tree="$CHEZMOI_REPO" fetch --tags

  # Get the latest release tag from the remote repository
  LATEST_REMOTE_TAG=$(git ls-remote --tags --sort="v:refname" "$REPO_URL" | tail -n1 | sed 's/.*\///;s/\^{}//')

  # Get the latest tag in the local repository
  LATEST_LOCAL_TAG=$(git --git-dir="$CHEZMOI_REPO/.git" --work-tree="$CHEZMOI_REPO" describe --tags --abbrev=0)

  # Compare the local and remote tags
  if [ -z "$LATEST_REMOTE_TAG" ] && [ "$PRERELEASE" == "false" ]; then
    log_info "No release tags found in the remote repository."
  elif [ "$LATEST_LOCAL_TAG" = "$LATEST_REMOTE_TAG" ] && [ "$PRERELEASE" == "false" ]; then
    log_info "Local dotfiles are up to date."
  else
    if [ "$PRERELEASE" == "true" ]; then
      log_task "Pulling latest changes from dotfiles repo"
    else
      log_task "Local dotfiles version is behind the remote version. Updating to $LATEST_REMOTE_TAG..."
    fi
    chezmoi update --apply=false
  fi
fi
# {{ if .dotdrop.enabled }}
if dotdrop --version &>/dev/null; then
  DOTDROP_REPO="${HOME}/.config/dotdrop"

  if [ -d "$DOTDROP_REPO/.git" ]; then
    log_task "Pulling latest changes from dotdrop repo"
    # git -C "$DOTDROP_REPO" fetch --all && git -C "$DOTDROP_REPO" reset --hard origin/main && git -C "$DOTDROP_REPO" clean -f
    git -C "$DOTDROP_REPO" pull || true
  fi
fi
# {{ end }}

# update dockerfiles repo
dockerfiles-pull

# {{ if .dotdrop.enabled }}
if dotdrop --version &>/dev/null; then
  if [ -f "${HOME}/.config/dotdrop/config-user.yaml" ]; then
    log_task "Updating dotfiles for dotdrop"
    dotdrop --cfg="${HOME}/.config/dotdrop/config-user.yaml" -p "{{ .dotdrop.user_profile }}" install
  fi
fi
# {{ end }}

if chezmoi --version &>/dev/null; then
  log_task "Applying changes on dotfiles with chezmoi"
  chezmoi init --force
  # pass additional arguments to chezmoi apply except for --prerelease or -p flag
  chezmoi apply "${@:2}"
fi
export DOTFILES_VERSION="{{ .DOTFILES_VERSION }}"

# update password-store and passage store
pass-pull

# {{ if .autorestic.enabled }}
# backup important files after updating dotfiles
# {{ end }}

log_green "âœ…  Dotfiles updated successfully. âœ¨ ðŸŒŸ âœ¨"
log_info "If you want to reload your shell, run:"
log_c exec zsh
