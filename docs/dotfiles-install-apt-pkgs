#!/bin/bash
set -euo pipefail
USER=${USSER:-$(whoami)}

if [[ -n "${DOTFILES_DEBUG:-}" ]]; then
  set -x
fi

function ensure_path_entry() {
  local entries=("$@")

  for entry in "${entries[@]}"; do
    if [[ ":${PATH}:" != *":${entry}:"* ]]; then
      export PATH="${entry}:${PATH}"
    fi
  done
}

function log_color() {
  local color_code="$1"
  shift

  printf "\033[${color_code}m%s\033[0m\n" "$*" >&2
}

function log_red() {
  log_color "0;31" "$@"
}

function log_blue() {
  log_color "0;34" "$@"
}

function log_green() {
  log_color "1;32" "$@"
}

function log_yellow() {
  log_color "1;33" "$@"
}

function log_task() {
  log_blue "⏳" "$@"
}

function log_manual_action() {
  log_red "🧑‍🔧" "$@"
}

function log_c() {
  log_yellow "👉" "$@"
}

function c() {
  log_c "$@"
  "$@"
}

function c_exec() {
  log_c "$@"
  exec "$@"
}

function log_error() {
  log_red "🔴" "$@"
}

function log_info() {
  log_green "💡" "$@"
}

function error() {
  log_error "$@"
  exit 1
}

function sudo() {
  local exec=false
  if [[ "$1" == "exec" ]]; then
    shift
    exec=true
  fi

  # shellcheck disable=SC2312
  if [[ "$(id -u)" -eq 0 ]]; then
    if [[ "${exec}" == "true" ]]; then
      exec "$@"
    else
      "$@"
    fi
  else
    if ! command sudo --non-interactive true 2>/dev/null; then
      log_manual_action "Root privileges are required, please enter your password below"
      command sudo --validate
    fi
    if [[ "${exec}" == "true" ]]; then
      exec sudo "$@"
    else
      command sudo "$@"
    fi
  fi
}

# Function to check if an item is in an array
# Arguments: search_item array
# Returns: 0 if the item is in the array, 1 otherwise
function is_item_in_array() {
  local search_item="$1"
  shift
  local array=("$@")

  for item in "${array[@]}"; do
    if [ "$item" == "$search_item" ]; then
      return 0
    fi
  done

  return 1
}

function is_package_installed() {
  local package="$1"

  command -v "${package}" >/dev/null 2>&1
}

function is_apt_package_installed() {
  local package="$1"

  if [[ "${DOTFILES_OS}" == "linux" ]] && command -v apt &>/dev/null; then
    apt list --quiet --quiet --installed "${package}" 2>/dev/null | grep --quiet .
  else
    return 1
  fi
}

log_task "Installing APT packages"

export DEBIAN_FRONTEND=noninteractive

wanted_packages=(
  code
  gh
  git-lfs
)
log_info "Wanted packages: ${wanted_packages[*]}"

PKG_NAME="code"
KEYRING_FILE="/usr/share/keyrings/packages.microsoft.gpg"
KEYRING_URL="https://packages.microsoft.com/keys/microsoft.asc"
if [[ ! -f "${KEYRING_FILE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  log_task "Downloading packages.microsoft.gpg"
  if [ "$USER" = "root" ]; then
    c curl -fsSL "${KEYRING_URL}" | gpg --dearmor -o "${KEYRING_FILE}"
    c chmod go+r "${KEYRING_FILE}"
  else
    c curl -fsSL "${KEYRING_URL}" | sudo gpg --dearmor -o "${KEYRING_FILE}"
    c sudo chmod go+r "${KEYRING_FILE}"
  fi
fi
SOURCE_LIST_FILE="/etc/apt/sources.list.d/vscode.list"
SOURCE_LIST_LINE="deb [arch=amd64,arm64,armhf signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main"
if [[ ! -f "${SOURCE_LIST_FILE}" ]] && [[ -n "${SOURCE_LIST_LINE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  log_task "Adding vscode.list repository to APT"
  if [ "$USER" = "root" ]; then
    c echo "$SOURCE_LIST_LINE" | tee "$SOURCE_LIST_FILE"
  else
    c echo "$SOURCE_LIST_LINE" | sudo tee "$SOURCE_LIST_FILE"
  fi
fi
PKG_NAME="gh"
KEYRING_FILE="/usr/share/keyrings/githubcli-archive-keyring.gpg"
KEYRING_URL="https://cli.github.com/packages/githubcli-archive-keyring.gpg"
if [[ ! -f "${KEYRING_FILE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  log_task "Downloading githubcli-archive-keyring.gpg"
  if [ "$USER" = "root" ]; then
    c curl -fsSL "${KEYRING_URL}" | gpg --dearmor -o "${KEYRING_FILE}"
    c chmod go+r "${KEYRING_FILE}"
  else
    c curl -fsSL "${KEYRING_URL}" | sudo gpg --dearmor -o "${KEYRING_FILE}"
    c sudo chmod go+r "${KEYRING_FILE}"
  fi
fi
SOURCE_LIST_FILE="/etc/apt/sources.list.d/github-cli.list"
SOURCE_LIST_LINE="deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
if [[ ! -f "${SOURCE_LIST_FILE}" ]] && [[ -n "${SOURCE_LIST_LINE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  log_task "Adding github-cli.list repository to APT"
  if [ "$USER" = "root" ]; then
    c echo "$SOURCE_LIST_LINE" | tee "$SOURCE_LIST_FILE"
  else
    c echo "$SOURCE_LIST_LINE" | sudo tee "$SOURCE_LIST_FILE"
  fi
fi
PKG_NAME="git-lfs"
REPO_SCRIPT="https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh"
SOURCE_LIST_FILE="/etc/apt/sources.list.d/github_git-lfs.list"
if [[ ! -f "${SOURCE_LIST_FILE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  if [[ $REPO_SCRIPT == http* ]]; then
    log_task "Downloading and running repository script for '${PKG_NAME}'"
    if [ "$USER" = "root" ]; then
      c curl -sLf --retry 3 --tlsv1.2 --proto "=https" "${REPO_SCRIPT}" | bash -
    else
      c curl -sLf --retry 3 --tlsv1.2 --proto "=https" "${REPO_SCRIPT}" | sudo bash -
    fi
  else
    log_task "Running repository script for '${PKG_NAME}'"
    if [ "$USER" = "root" ]; then
      c "${REPO_SCRIPT}"
    else
      c sudo "${REPO_SCRIPT}"
    fi
  fi
fi
SOURCE_LIST_FILE="/etc/apt/sources.list.d/github_git-lfs.list"
SOURCE_LIST_LINE=""
if [[ ! -f "${SOURCE_LIST_FILE}" ]] && [[ -n "${SOURCE_LIST_LINE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  log_task "Adding github_git-lfs.list repository to APT"
  if [ "$USER" = "root" ]; then
    c echo "$SOURCE_LIST_LINE" | tee "$SOURCE_LIST_FILE"
  else
    c echo "$SOURCE_LIST_LINE" | sudo tee "$SOURCE_LIST_FILE"
  fi
fi

missing_packages=()

if [[ ${#missing_packages[@]} -gt 0 ]] || [[ ${#upgrade_packages[@]} -gt 0 ]]; then
  # This script also gets called when running rootmoi
  if [ "$USER" = "root" ]; then
    apt_command=(DEBIAN_FRONTEND=noninteractive apt-get)
  else
    apt_command=(sudo DEBIAN_FRONTEND=noninteractive apt-get)
  fi

  c "${apt_command[@]}" update --yes -qq -o=Dpkg::Use-Pty=0
fi
if [[ ${#missing_packages[@]} -gt 0 ]]; then
  log_task "Installing missing packages with APT: ${missing_packages[*]}"
  c "${apt_command[@]}" install --yes -qq -o=Dpkg::Use-Pty=0 --no-install-recommends "${missing_packages[@]}"
else
  log_info "No missing packages to install with APT"
fi
log_green "✅  APT packages installed successfully. ✨ 🌟 ✨"
