#!/bin/bash
set -euo pipefail

if [[ -n "${DOTFILES_DEBUG:-}" ]]; then
  set -x
fi

function ensure_path_entry() {
  local entries=("$@")

  for entry in "${entries[@]}"; do
    if [[ ":${PATH}:" != *":${entry}:"* ]]; then
      export PATH="${entry}:${PATH}"
    fi
  done
}

function log_color() {
  local color_code="$1"
  shift

  printf "\033[${color_code}m%s\033[0m\n" "$*" >&2
}

function log_red() {
  log_color "0;31" "$@"
}

function log_blue() {
  log_color "0;34" "$@"
}

function log_green() {
  log_color "1;32" "$@"
}

function log_yellow() {
  log_color "1;33" "$@"
}

function log_task() {
  log_blue "⏳" "$@"
}

function log_manual_action() {
  log_red "🧑‍🔧" "$@"
}

function log_c() {
  log_yellow "👉" "$@"
}

function c() {
  log_c "$@"
  "$@"
}

function c_exec() {
  log_c "$@"
  exec "$@"
}

function log_error() {
  log_red "🔴" "$@"
}

function log_info() {
  log_green "💡" "$@"
}

function error() {
  log_error "$@"
  exit 1
}

function sudo() {
  local exec=false
  if [[ "$1" == "exec" ]]; then
    shift
    exec=true
  fi

  # shellcheck disable=SC2312
  if [[ "$(id -u)" -eq 0 ]]; then
    if [[ "${exec}" == "true" ]]; then
      exec "$@"
    else
      "$@"
    fi
  else
    if ! command sudo --non-interactive true 2>/dev/null; then
      log_manual_action "Root privileges are required, please enter your password below"
      command sudo --validate
    fi
    if [[ "${exec}" == "true" ]]; then
      exec sudo "$@"
    else
      command sudo "$@"
    fi
  fi
}

# Function to check if an item is in an array
# Arguments: search_item array
# Returns: 0 if the item is in the array, 1 otherwise
function is_item_in_array() {
  local search_item="$1"
  shift
  local array=("$@")

  for item in "${array[@]}"; do
    if [ "$item" == "$search_item" ]; then
      return 0
    fi
  done

  return 1
}

log_task "Installing APT prerequisites"

# We need to install ca-certificates before we add the APT repos, because some of them
# may use newer CAs.
# Ignore apt update error if it is due to expired certificate because chances are that
# the next command will fix it.
if output="$(sudo apt-get update --yes)" || [[ "${output}" == *"The certificate chain uses expired certificate."* ]]; then
  echo "${output}"
  true
else
  echo "${output}"
  exit 1
fi
c sudo DEBIAN_FRONTEND=noninteractive apt-get install --yes -qq -o=Dpkg::Use-Pty=0 --no-install-recommends ca-certificates
c sudo DEBIAN_FRONTEND=noninteractive apt-get install --yes -qq -o=Dpkg::Use-Pty=0 --no-install-recommends curl wget gnupg \
  software-properties-common zsh locales locales-all jq gettext autoconf apt-transport-https zip bzip2 unzip

# Add APT repositories for newer versions of Git.
# This is required for git to use signing keys with ed25519 algorithm.
# It means that we can use the same SSH key for authentication and signing commits.
# remove existing apt sources
c sudo rm -f etc/apt/sources.list.d/git-core-*.list*
c sudo add-apt-repository ppa:git-core/ppa --yes
c sudo apt-get update --yes
c sudo DEBIAN_FRONTEND=noninteractive apt-get install --yes -qq -o=Dpkg::Use-Pty=0 --no-install-recommends git

# Set up locales
# check if locale is already set up by running locale | grep LC_ALL | grep en_US.UTF-8
if ! locale | grep LC_ALL | grep -q en_US.UTF-8; then
  log_task "Setting up locales"
  c sudo locale-gen en_US en_US.UTF-8 || true
  c sudo localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true
fi
